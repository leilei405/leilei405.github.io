<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于Node.js</title>
      <link href="/2022/10/11/About%20nodejs/"/>
      <url>/2022/10/11/About%20nodejs/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题之HTML &amp;&amp; CSS</title>
      <link href="/2022/10/11/InterView-HTML&amp;&amp;CSS/"/>
      <url>/2022/10/11/InterView-HTML&amp;&amp;CSS/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是盒模型？"><a href="#什么是盒模型？" class="headerlink" title="什么是盒模型？"></a>什么是盒模型？</h4><p>​css盒模型本质上是一个盒子,封装周围的html元素,他包括:内容区域,内填充区域,边框区域和外边距区域</p><h4 id="对BFC的理解？"><a href="#对BFC的理解？" class="headerlink" title="对BFC的理解？"></a>对BFC的理解？</h4><p>​块级格式上下文,是指块级元素的一种渲染规则,只有块级元素参与</p><p>特性(渲染规则):</p><p>​1:内部的盒子是在垂直方向一个接一个的放置</p><p>​2:垂直方向上的间距是由margin决定的属于同一个bfc区域的margin会发生折叠</p><p>​3:每个元素的左边距(margin-box)会与包含块的边框(border-box)相接触(浮动元素也是如此)</p><p>​4:bfc是页面中的一个隔离独立的容器,里面的元素不会影响外面的元素,反之亦然</p><p>​5:计算bfc高度时,浮动子元素也要参与计算</p><p>​6:bfc区域不会与浮动区域发生重叠</p><p>如何生成bfc?</p><p>​浮动 定位 转行快 overflow</p><p>bfc解决的问题</p><p>​清除浮动  防止margin重叠  避免文字环绕 自适应两栏布局</p><h4 id="水平垂直居中的几种方式？"><a href="#水平垂直居中的几种方式？" class="headerlink" title="水平垂直居中的几种方式？"></a>水平垂直居中的几种方式？</h4><p>​1:定位+margin负值</p><p>​2:定位+margin:auto</p><p>​3:弹性盒</p><p>​4.定位+transform:translate(-50%,-50%)</p><h4 id="如何清除浮动？"><a href="#如何清除浮动？" class="headerlink" title="如何清除浮动？"></a>如何清除浮动？</h4><pre><code>    1:给父元素设置固定高度</code></pre><p>​2:给父元素添加overflow</p><p>​3:额外标签法</p><p>​4:伪元素清除浮动</p><p>​5:给父元素添加浮动</p><p>​6:给父元素添加绝对定位</p><h4 id="三栏布局，左右固定，中间自适应-圣杯，双飞"><a href="#三栏布局，左右固定，中间自适应-圣杯，双飞" class="headerlink" title="三栏布局，左右固定，中间自适应(圣杯，双飞)"></a>三栏布局，左右固定，中间自适应(圣杯，双飞)</h4><h4 id="link-amp-amp-import-区别？"><a href="#link-amp-amp-import-区别？" class="headerlink" title="link &amp;&amp; @import 区别？"></a>link &amp;&amp; @import 区别？</h4><h4 id="使元素隐藏消失的方法？"><a href="#使元素隐藏消失的方法？" class="headerlink" title="使元素隐藏消失的方法？"></a>使元素隐藏消失的方法？</h4><p>​display:none 不占位</p><p>​visibility:hidden 占位</p><p>​opacity:0 占位</p><h4 id="transiiton-amp-amp-animation的区别？"><a href="#transiiton-amp-amp-animation的区别？" class="headerlink" title="transiiton&amp;&amp;animation的区别？"></a>transiiton&amp;&amp;animation的区别？</h4><p>​1:触发条件不同</p><p>​2:动画的复杂程度不同</p><p>​3:是否可以设置动画的次数</p><h4 id="语义化的意义是什么？"><a href="#语义化的意义是什么？" class="headerlink" title="语义化的意义是什么？"></a>语义化的意义是什么？</h4><p>​语义化是用合理的html标记语言及其特有的属性去格式化文档内容</p><h4 id="position的值？"><a href="#position的值？" class="headerlink" title="position的值？"></a>position的值？</h4><p>​css 定位还有一个新增属性，<strong>粘性定位 sticky</strong>，它主要用在对 scroll 事件的监听上</p><p>​粘性定位可以认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，后为固定定位。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#one &#123; <span class="attr">position</span>: sticky; <span class="attr">top</span>: 10px; &#125;</span><br></pre></td></tr></table></figure><h4 id="css3有哪些新特性？"><a href="#css3有哪些新特性？" class="headerlink" title="css3有哪些新特性？"></a>css3有哪些新特性？</h4><h3 id="flex布局？使用场景？"><a href="#flex布局？使用场景？" class="headerlink" title="flex布局？使用场景？"></a>flex布局？使用场景？</h3><h4 id="css创建一个三角形？"><a href="#css创建一个三角形？" class="headerlink" title="css创建一个三角形？"></a>css创建一个三角形？</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">width:</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line"><span class="attr">height:</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line"><span class="attr">border-top:</span> <span class="string">40px</span> <span class="string">solid</span> <span class="string">transparent;</span></span><br><span class="line"><span class="attr">border-left:</span> <span class="string">40px</span> <span class="string">solid</span> <span class="string">transparent;</span></span><br><span class="line"><span class="attr">border-right:</span> <span class="string">40px</span> <span class="string">solid</span> <span class="string">transparent;</span></span><br><span class="line"><span class="attr">border-bottom:</span> <span class="string">40px</span> <span class="string">solid</span> <span class="comment">#ff0000;</span></span><br></pre></td></tr></table></figure><h4 id="一个满屏的品字布局如何做"><a href="#一个满屏的品字布局如何做" class="headerlink" title="一个满屏的品字布局如何做?"></a>一个满屏的品字布局如何做?</h4><h4 id="常见的兼容性问题？"><a href="#常见的兼容性问题？" class="headerlink" title="常见的兼容性问题？"></a>常见的兼容性问题？</h4><h4 id="css优化，提高性能的方法"><a href="#css优化，提高性能的方法" class="headerlink" title="css优化，提高性能的方法?"></a>css优化，提高性能的方法?</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>参考链接：<a href="https://juejin.cn/post/6844903832552472583#heading-59">https://juejin.cn/post/6844903832552472583#heading-59</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题之Vue</title>
      <link href="/2022/10/08/InterView-Vue/"/>
      <url>/2022/10/08/InterView-Vue/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题之React</title>
      <link href="/2022/10/08/Interview-React/"/>
      <url>/2022/10/08/Interview-React/</url>
      
        <content type="html"><![CDATA[<h5 id="react中创建组件有几种方式-简单写出伪代码"><a href="#react中创建组件有几种方式-简单写出伪代码" class="headerlink" title="react中创建组件有几种方式? 简单写出伪代码"></a>react中创建组件有几种方式? 简单写出伪代码</h5><h5 id="react中类组件和函数组件有什么区别"><a href="#react中类组件和函数组件有什么区别" class="headerlink" title="react中类组件和函数组件有什么区别?"></a>react中类组件和函数组件有什么区别?</h5><h5 id="react的类组件中如何定义state状态数据-简单写出伪代码"><a href="#react的类组件中如何定义state状态数据-简单写出伪代码" class="headerlink" title="react的类组件中如何定义state状态数据? 简单写出伪代码"></a>react的类组件中如何定义state状态数据? 简单写出伪代码</h5><h5 id="react类组件中如何更新state状态数据"><a href="#react类组件中如何更新state状态数据" class="headerlink" title="react类组件中如何更新state状态数据?"></a>react类组件中如何更新state状态数据?</h5><h5 id="react中如何注册事件-需要注意哪些问题"><a href="#react中如何注册事件-需要注意哪些问题" class="headerlink" title="react中如何注册事件? 需要注意哪些问题?"></a>react中如何注册事件? 需要注意哪些问题?</h5><h5 id="react中如何实现父组件向子组件传递数据"><a href="#react中如何实现父组件向子组件传递数据" class="headerlink" title="react中如何实现父组件向子组件传递数据?"></a>react中如何实现父组件向子组件传递数据?</h5><h5 id="react中如何实现子组件向父组件传递数据"><a href="#react中如何实现子组件向父组件传递数据" class="headerlink" title="react中如何实现子组件向父组件传递数据?"></a>react中如何实现子组件向父组件传递数据?</h5><h5 id="react中如何实现非父子组件之间的数据传递"><a href="#react中如何实现非父子组件之间的数据传递" class="headerlink" title="react中如何实现非父子组件之间的数据传递?"></a>react中如何实现非父子组件之间的数据传递?</h5><h5 id="react中如何实现ref属性操作元素-使用ref属性操作元素有什么好处"><a href="#react中如何实现ref属性操作元素-使用ref属性操作元素有什么好处" class="headerlink" title="react中如何实现ref属性操作元素? 使用ref属性操作元素有什么好处?"></a>react中如何实现ref属性操作元素? 使用ref属性操作元素有什么好处?</h5><h5 id="react中提供哪些生命周期钩子函数"><a href="#react中提供哪些生命周期钩子函数" class="headerlink" title="react中提供哪些生命周期钩子函数?"></a>react中提供哪些生命周期钩子函数?</h5><h5 id="react-router-dom路由模块中提供了那些组件-分别有什么作用"><a href="#react-router-dom路由模块中提供了那些组件-分别有什么作用" class="headerlink" title="react-router-dom路由模块中提供了那些组件? 分别有什么作用?"></a>react-router-dom路由模块中提供了那些组件? 分别有什么作用?</h5><h5 id="react-router-dom路由模块中如何配置动态路由以及如何获取动态路由参数"><a href="#react-router-dom路由模块中如何配置动态路由以及如何获取动态路由参数" class="headerlink" title="react-router-dom路由模块中如何配置动态路由以及如何获取动态路由参数?"></a>react-router-dom路由模块中如何配置动态路由以及如何获取动态路由参数?</h5><h5 id="react-router-dom中提供的HashRouter和BrowserRouter两个路由容器组件由什么区别"><a href="#react-router-dom中提供的HashRouter和BrowserRouter两个路由容器组件由什么区别" class="headerlink" title="react-router-dom中提供的HashRouter和BrowserRouter两个路由容器组件由什么区别?"></a>react-router-dom中提供的HashRouter和BrowserRouter两个路由容器组件由什么区别?</h5><h5 id="如何使用fetch发送get请求-请写出伪代码"><a href="#如何使用fetch发送get请求-请写出伪代码" class="headerlink" title="如何使用fetch发送get请求? 请写出伪代码"></a>如何使用fetch发送get请求? 请写出伪代码</h5><h5 id="如何使用fetch发送post请求-请写出伪代码"><a href="#如何使用fetch发送post请求-请写出伪代码" class="headerlink" title="如何使用fetch发送post请求? 请写出伪代码"></a>如何使用fetch发送post请求? 请写出伪代码</h5><h5 id="create-react-app脚手架开发环境中如何配置跨域代理"><a href="#create-react-app脚手架开发环境中如何配置跨域代理" class="headerlink" title="create-react-app脚手架开发环境中如何配置跨域代理?"></a>create-react-app脚手架开发环境中如何配置跨域代理?</h5><h5 id="如何使用redux创建数据存储对象"><a href="#如何使用redux创建数据存储对象" class="headerlink" title="如何使用redux创建数据存储对象?"></a>如何使用redux创建数据存储对象?</h5><h5 id="如何在react组件中获取redux数据存储对象中的数据-以及如何对redux中的数据进行操作"><a href="#如何在react组件中获取redux数据存储对象中的数据-以及如何对redux中的数据进行操作" class="headerlink" title="如何在react组件中获取redux数据存储对象中的数据? 以及如何对redux中的数据进行操作?"></a>如何在react组件中获取redux数据存储对象中的数据? 以及如何对redux中的数据进行操作?</h5><h5 id="redux中包含哪些核心方法-分别有什么作用"><a href="#redux中包含哪些核心方法-分别有什么作用" class="headerlink" title="redux中包含哪些核心方法? 分别有什么作用?"></a>redux中包含哪些核心方法? 分别有什么作用?</h5><h5 id="react-redux工具包中包含哪些核心对象-分别有什么作用"><a href="#react-redux工具包中包含哪些核心对象-分别有什么作用" class="headerlink" title="react-redux工具包中包含哪些核心对象? 分别有什么作用?"></a>react-redux工具包中包含哪些核心对象? 分别有什么作用?</h5><h5 id="什么是actionCreator-能否在actionCreator中编写发送数据请求的异步方法-如果不能-该如何解决"><a href="#什么是actionCreator-能否在actionCreator中编写发送数据请求的异步方法-如果不能-该如何解决" class="headerlink" title="什么是actionCreator? 能否在actionCreator中编写发送数据请求的异步方法? 如果不能, 该如何解决?"></a>什么是actionCreator? 能否在actionCreator中编写发送数据请求的异步方法? 如果不能, 该如何解决?</h5><h5 id="如何让函数组件拥有自己的状态数据-请写出示例代码"><a href="#如何让函数组件拥有自己的状态数据-请写出示例代码" class="headerlink" title="如何让函数组件拥有自己的状态数据? 请写出示例代码"></a>如何让函数组件拥有自己的状态数据? 请写出示例代码</h5><h5 id="如何在函数组件中使用ref属性操作元素-请写出示例代码"><a href="#如何在函数组件中使用ref属性操作元素-请写出示例代码" class="headerlink" title="如何在函数组件中使用ref属性操作元素? 请写出示例代码"></a>如何在函数组件中使用ref属性操作元素? 请写出示例代码</h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.0</title>
      <link href="/2022/10/08/Vue3/"/>
      <url>/2022/10/08/Vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-cli创建vue3项目"><a href="#vue-cli创建vue3项目" class="headerlink" title="vue-cli创建vue3项目"></a>vue-cli创建vue3项目</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="vite创建vue3项目"><a href="#vite创建vue3项目" class="headerlink" title="vite创建vue3项目"></a>vite创建vue3项目</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="常用Composition-API"><a href="#常用Composition-API" class="headerlink" title="常用Composition API"></a>常用Composition API</h1><h3 id="初识setup"><a href="#初识setup" class="headerlink" title="初识setup"></a>初识setup</h3><h3 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h3><h3 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h3><h3 id="vue3响应式原理"><a href="#vue3响应式原理" class="headerlink" title="vue3响应式原理"></a>vue3响应式原理</h3><h3 id="setup俩个注意点"><a href="#setup俩个注意点" class="headerlink" title="setup俩个注意点"></a>setup俩个注意点</h3><h3 id="reactive-与-ref"><a href="#reactive-与-ref" class="headerlink" title="reactive 与 ref"></a>reactive 与 ref</h3><h3 id="computed计算属性与watch监视"><a href="#computed计算属性与watch监视" class="headerlink" title="computed计算属性与watch监视"></a>computed计算属性与watch监视</h3><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h3 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h3><h3 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h3><h1 id="其他composition-API"><a href="#其他composition-API" class="headerlink" title="其他composition API"></a>其他composition API</h1><h1 id="Composition-的优势"><a href="#Composition-的优势" class="headerlink" title="Composition 的优势"></a>Composition 的优势</h1><h1 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h1><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题之JavaScript</title>
      <link href="/2022/09/28/Interview-JavaScript/"/>
      <url>/2022/09/28/Interview-JavaScript/</url>
      
        <content type="html"><![CDATA[<h3 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h3><p>防抖:进行重复相同操作时,只执行最后一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防抖</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">debounce</span> = fn =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="literal">null</span>;          <span class="comment">// 创建一个标记用来存放定时器的返回值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);   <span class="comment">// 当用户输入时把上一个setTimeout清除掉</span></span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;,<span class="number">300</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sayHi</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;防抖成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inp = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#inp&quot;</span>);</span><br><span class="line">inp.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>,<span class="title function_">debounce</span>(sayHi));     <span class="comment">// 防抖</span></span><br></pre></td></tr></table></figure><p>节流:  在一段时间内如果进行重复操作时,只执行一次,比如俩秒内的点击事件无论多少次,只执行一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节流</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = fn =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> canRun = <span class="literal">true</span>;          <span class="comment">// 通过闭包保存一个标记</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!canRun) <span class="keyword">return</span>;     <span class="comment">// 在函数开头判断标记是否为true，不为true则return</span></span><br><span class="line">        canRun = <span class="literal">false</span>;         <span class="comment">// 立即设置为false</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">            <span class="comment">// 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉</span></span><br><span class="line">            canRun = <span class="literal">true</span>;</span><br><span class="line">        &#125;,<span class="number">300</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sayHi</span> = e =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerWidth</span>,e.<span class="property">target</span>.<span class="property">innerHeight</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,<span class="title function_">throttle</span>(sayHi));</span><br></pre></td></tr></table></figure><h3 id="执行代码-console输出的信息是"><a href="#执行代码-console输出的信息是" class="headerlink" title="执行代码,console输出的信息是?"></a>执行代码,console输出的信息是?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> a = (b=<span class="number">5</span>)</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p>结果:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b =  ?</span><br><span class="line">a =  ?</span><br></pre></td></tr></table></figure><h3 id="浏览器渲染页面做了什么"><a href="#浏览器渲染页面做了什么" class="headerlink" title="浏览器渲染页面做了什么?"></a>浏览器渲染页面做了什么?</h3><h3 id="从输入url到加载完页面发生了什么"><a href="#从输入url到加载完页面发生了什么" class="headerlink" title="从输入url到加载完页面发生了什么?"></a>从输入url到加载完页面发生了什么?</h3><h3 id="闭包是什么"><a href="#闭包是什么" class="headerlink" title="闭包是什么?"></a>闭包是什么?</h3><h3 id="原型-原型链"><a href="#原型-原型链" class="headerlink" title="原型,原型链?"></a>原型,原型链?</h3><h3 id="回流-重绘"><a href="#回流-重绘" class="headerlink" title="回流,重绘?"></a>回流,重绘?</h3><h3 id="作用域-作用域链"><a href="#作用域-作用域链" class="headerlink" title="作用域,作用域链?"></a>作用域,作用域链?</h3><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数?"></a>箭头函数?</h3><h3 id="JS判断数组的方法"><a href="#JS判断数组的方法" class="headerlink" title="JS判断数组的方法?"></a>JS判断数组的方法?</h3><h3 id="try-x2F-catch-x2F-finally"><a href="#try-x2F-catch-x2F-finally" class="headerlink" title="try&#x2F;catch&#x2F;finally?"></a>try&#x2F;catch&#x2F;finally?</h3><h3 id="async-amp-amp-await"><a href="#async-amp-amp-await" class="headerlink" title="async  &amp;&amp;  await?"></a>async  &amp;&amp;  await?</h3><h3 id="js继承的方式"><a href="#js继承的方式" class="headerlink" title="js继承的方式?"></a>js继承的方式?</h3><h3 id="typeof-null"><a href="#typeof-null" class="headerlink" title="typeof null?"></a>typeof null?</h3><h3 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题?"></a>this指向问题?</h3><h3 id="深拷贝-amp-amp-浅拷贝"><a href="#深拷贝-amp-amp-浅拷贝" class="headerlink" title="深拷贝 &amp;&amp; 浅拷贝?"></a>深拷贝 &amp;&amp; 浅拷贝?</h3><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制?"></a>垃圾回收机制?</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Angular</title>
      <link href="/2022/09/28/angular/"/>
      <url>/2022/09/28/angular/</url>
      
        <content type="html"><![CDATA[<h4 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h4><p><a href="https://cli.angular.io/"><strong>Angular CLI</strong></a>是一个<strong>命令行界面</strong>工具，它可以创建项目、添加文件以及执行一大堆开发任务，比如测试、打包和发布。</p><p>本章的目标是构建并运行一个超级简单的 TypeScript Angular 应用。使用 Angular CLI 来让<em>每个</em> Angular 应用从<a href="https://v6.angular.cn/guide/styleguide">风格指南</a>的那些建议中获益。</p><h4 id="设置开发环境"><a href="#设置开发环境" class="headerlink" title="设置开发环境"></a>设置开发环境</h4><p>安装node  </p><p>终端使用node -v   npm -v     <strong>验证一下你正在运行 node <code>8.x</code> 和 npm <code>5.x</code> 以上的版本。</strong> 更老的版本可能会出现错误，更新的版本则没问题。 </p><p>全局安装 angular</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>打开终端窗口。</p><p>运行下列命令来生成一个新项目以及默认的应用代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new my-app</span><br></pre></td></tr></table></figure><p> Angular CLI 会安装必要的 NPM 包、创建项目文件，并在该项目中生成一个简单的默认应用。这可能要花一点时间 </p><h4 id="启动开发服务器"><a href="#启动开发服务器" class="headerlink" title="启动开发服务器"></a>启动开发服务器</h4><p> 进入项目目录，并启动服务器。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my-app</span><br><span class="line">ng serve --open</span><br></pre></td></tr></table></figure><p><code>ng serve</code> 命令会启动开发服务器，监听文件变化，并在修改这些文件时重新构建此应用。</p><p>使用 <code>--open</code>（或 <code>-o</code>）参数可以自动打开浏览器并访问 <code>http://localhost:4200/</code>。</p><p>本应用会用一条消息来跟你打招呼：</p><h4 id="编辑你的第一个-Angular-组件"><a href="#编辑你的第一个-Angular-组件" class="headerlink" title="编辑你的第一个 Angular 组件"></a>编辑你的第一个 Angular 组件</h4><p>这个 CLI 为你创建了第一个 Angular 组件。 它就是名叫 <code>app-root</code> 的<em>根组件</em>。 你可以在 <code>./src/app/app.component.ts</code> 目录下找到它。</p><p>打开这个组件文件，并且把 <code>title</code> 属性从 <code>&#39;app&#39;</code> 改为 <code>&#39;My First Angular App!&#39;</code>：</p><p>src&#x2F;app&#x2F;app.component.ts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export class AppComponent &#123;</span><br><span class="line">  title = &#x27;My First Angular App!&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器会自动刷新，并具有修改之后的标题。不错，不过它还可以更好看一点。</p><p>打开 <code>src/app/app.component.css</code> 并给这个组件设置一些样式</p><p><code>src/app/app.component.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#369</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">250%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="项目文件概览"><a href="#项目文件概览" class="headerlink" title="项目文件概览"></a>项目文件概览</h4><p> 你首先要看的文件是 <code>README.md</code>。 它提供了一些如何使用 CLI 命令的基础信息 </p><p> 有些生成的文件你可能觉得陌生。    请访问 <a href="https://github.com/angular/angular-cli">Angular CLI 的仓库</a>及其 <a href="https://github.com/angular/angular-cli/wiki">Wiki</a>。 </p><h4 id="src文件夹"><a href="#src文件夹" class="headerlink" title="src文件夹"></a>src文件夹</h4><p> 你的应用代码位于 <code>src</code> 文件夹中。 所有的 Angular 组件、模板、样式、图片以及你的应用所需的任何东西都在那里。 这个文件夹之外的文件都是为构建应用提供支持用的。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">e2e</span><br><span class="line">src</span><br><span class="line">app.<span class="property">e2e</span>-spec.<span class="property">ts</span></span><br><span class="line">app.<span class="property">po</span>.<span class="property">ts</span></span><br><span class="line">tsconfig.<span class="property">e2e</span>.<span class="property">json</span></span><br><span class="line">protractor.<span class="property">conf</span>.<span class="property">js</span></span><br><span class="line">    node_modules/...</span><br><span class="line">src/...</span><br><span class="line">karma.<span class="property">conf</span>.<span class="property">js</span></span><br><span class="line">    .<span class="property">editorconfig</span></span><br><span class="line">    .<span class="property">gitignore</span></span><br><span class="line">    angular.<span class="property">json</span></span><br><span class="line">    package.<span class="property">json</span></span><br><span class="line">    <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line">    tsconfig.<span class="property">json</span></span><br><span class="line">    tslint.<span class="property">json</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">文件</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left"><code>e2e/</code></td><td align="left">在 <code>e2e/</code> 下是端到端（end-to-end）测试。 它们不在 <code>src/</code> 下，是因为端到端测试实际上和应用是相互独立的，它只适用于测试你的应用而已。 这也就是为什么它会拥有自己的 <code>tsconfig.json</code>。</td></tr><tr><td align="left"><code>node_modules/</code></td><td align="left"><code>Node.js</code> 创建了这个文件夹，并且把 <code>package.json</code> 中列举的所有第三方模块都放在其中。</td></tr><tr><td align="left"><code>.editorconfig</code></td><td align="left">给你的编辑器看的一个简单配置文件，它用来确保参与你项目的每个人都具有基本的编辑器配置。 大多数的编辑器都支持 <code>.editorconfig</code> 文件，详情参见 <a href="http://editorconfig.org/">http://editorconfig.org</a> 。</td></tr><tr><td align="left"><code>.gitignore</code></td><td align="left">一个 Git 的配置文件，用来确保某些自动生成的文件不会被提交到源码控制系统中。</td></tr><tr><td align="left"><code>angular.json</code></td><td align="left">Angular CLI 的配置文件。 在这个文件中，你可以设置一系列默认值，还可以配置项目编译时要包含的那些文件。 要了解更多，请参阅它的官方文档。</td></tr><tr><td align="left"><code>package.json</code></td><td align="left"><code>npm</code> 配置文件，其中列出了项目使用到的第三方依赖包。 你还可以在这里添加自己的<a href="https://docs.npmjs.com/misc/scripts">自定义脚本</a>。</td></tr><tr><td align="left"><code>protractor.conf.js</code></td><td align="left">给<a href="http://www.protractortest.org/">Protractor</a>使用的端到端测试配置文件，当运行 <code>ng e2e</code> 的时候会用到它。</td></tr><tr><td align="left"><code>README.md</code></td><td align="left">项目的基础文档，预先写入了 CLI 命令的信息。 别忘了用项目文档改进它，以便每个查看此仓库的人都能据此构建出你的应用。</td></tr><tr><td align="left"><code>tsconfig.json</code></td><td align="left">TypeScript 编译器的配置，你的 IDE 会借助它来给你提供更好的帮助。</td></tr><tr><td align="left"><code>tslint.json</code></td><td align="left">给<a href="https://palantir.github.io/tslint/">TSLint</a>和<a href="http://codelyzer.com/">Codelyzer</a>用的配置信息，当运行 <code>ng lint</code> 时会用到。 Lint 功能可以帮你保持代码风格的统一。</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用组件库及工具网站</title>
      <link href="/2022/09/28/oftenTool/"/>
      <url>/2022/09/28/oftenTool/</url>
      
        <content type="html"><![CDATA[<p>组件库</p><p><a href="https://ant-design.gitee.io/index-cn">antd组件库</a></p><p><a href="https://reactrouter.com/web/guides/quick-start">react-router-dom</a></p><p><a href="http://reactcommunity.org/react-transition-group">react-transtion-group英文文档</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">fetch文档</a></p><p><a href="https://www.redux.org.cn/">redux中文文档</a></p><p><a href="https://www.npmjs.com/package/http-proxy-middleware">http-proxy-middleware跨域中间件</a></p><p>动画库</p><p>工具库</p><p><a href="https://www.npmjs.com/package/qs">qs查询字符串处理工具</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于TS创建React项目</title>
      <link href="/2022/09/28/based-ts-react/"/>
      <url>/2022/09/28/based-ts-react/</url>
      
        <content type="html"><![CDATA[<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app react-ts --template typescript</span><br><span class="line">添加 --template typescript 表示创建支持<span class="variable constant_">TS</span>的项目</span><br></pre></td></tr></table></figure><h3 id="目录变化"><a href="#目录变化" class="headerlink" title="目录变化"></a>目录变化</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>在项目根目录多了一个tsconfig.<span class="property">json</span>（<span class="variable constant_">TS</span> 的配置文件）</span><br><span class="line"><span class="number">2.</span>src目录中 原来的 .<span class="property">js</span> 变为 .<span class="property">ts</span> 或 .<span class="property">tsx</span></span><br><span class="line">   .<span class="property">ts</span>  ts文件的后缀名</span><br><span class="line">   .<span class="property">tsx</span> 是在<span class="variable constant_">TS</span>中使用<span class="title class_">React</span>组件时的后缀,只要代码中出现<span class="variable constant_">JSX</span>结构,就得使用该后缀</span><br><span class="line"><span class="number">3.</span>src目录中,多了react-app-env.<span class="property">d</span>.<span class="property">ts</span>文件</span><br><span class="line">    .<span class="property">d</span>.<span class="property">ts</span> 类型声明文件，用来指定类型</span><br><span class="line">    切记:不要动 src/react-app-env.<span class="property">d</span>.<span class="property">ts</span> 文件</span><br></pre></td></tr></table></figure><h3 id="x2F-x2F-x2F-指令"><a href="#x2F-x2F-x2F-指令" class="headerlink" title="&#x2F;&#x2F;&#x2F;指令"></a>&#x2F;&#x2F;&#x2F;指令</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TS 中的 三斜线指令，作用类似于 import 用于指定对其他类型声明文件的依赖关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处，通过 types 来声明依赖于 react-scripts 包</span></span><br><span class="line"><span class="comment">// https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html#-reference-types-</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;react-scripts&quot; /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="tsconfig-的介绍"><a href="#tsconfig-的介绍" class="headerlink" title="tsconfig 的介绍"></a>tsconfig 的介绍</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tsconfig.json 是 TS 项目的配置文件，可以用来指定如何编译 TS 代码等</span><br><span class="line">手动创建 tsconfig.json 配置文件的命令：tsc --init</span><br><span class="line">说明：所有的配置项都可以通过鼠标移入的方式，来查看配置项的解释说明</span><br><span class="line">tsconfig文档链接:https://www.typescriptlang.org/tsconfig</span><br></pre></td></tr></table></figure><h3 id="各个配置项作用"><a href="#各个配置项作用" class="headerlink" title="各个配置项作用"></a>各个配置项作用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">  <span class="comment">// 编译选项</span></span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 生成代码的语言版本：将我们写的 TS 代码编译成哪个版本的 JS 代码</span></span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="comment">// 指定要包含在编译中的 library</span></span><br><span class="line">    <span class="comment">// https://github.com/microsoft/TypeScript/blob/90e83adb44/lib/lib.dom.iterable.d.ts</span></span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;dom&quot;</span>, <span class="string">&quot;dom.iterable&quot;</span>, <span class="string">&quot;esnext&quot;</span>],</span><br><span class="line">    <span class="comment">// 允许 ts 编译器编译 js 文件</span></span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 跳过类型声明文件的类型检查</span></span><br><span class="line">    <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// es 模块 互操作，屏蔽 ESModule 和 CommonJS 之间的差异</span></span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 允许通过 import x from &#x27;y&#x27; 即使模块没有显式指定 default 导出</span></span><br><span class="line">    <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 开启严格模式</span></span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 对文件名称强制区分大小写</span></span><br><span class="line">    <span class="string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 为 switch 语句启用错误报告</span></span><br><span class="line">    <span class="string">&quot;noFallthroughCasesInSwitch&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 生成代码的模块化标准</span></span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="comment">// 模块解析（查找）策略</span></span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="comment">// 允许导入扩展名为.json的模块</span></span><br><span class="line">    <span class="string">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 是否将没有 import/export 的文件视为旧（全局而非模块化）脚本文件</span></span><br><span class="line">    <span class="string">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 编译时不生成任何JS文件（只进行类型检查）</span></span><br><span class="line">    <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 指定将 JSX 编译成什么形式</span></span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;react-jsx&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指定允许 ts 处理的目录</span></span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;src&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型声明文件介绍"><a href="#类型声明文件介绍" class="headerlink" title="类型声明文件介绍"></a>类型声明文件介绍</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在项目开发中使用第三方库时,几乎都有相应的 TS 类型</span><br><span class="line"></span><br><span class="line">类型声明文件：用来为已存在的 JS 提供类型信息</span><br><span class="line"></span><br><span class="line">TS项目中使用这些库时,就像用TS一样,都会有代码提示,类型保护等机制</span><br></pre></td></tr></table></figure><h3 id="TS-的两种文件类型"><a href="#TS-的两种文件类型" class="headerlink" title="TS 的两种文件类型"></a>TS 的两种文件类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">ts</span> 文件:</span><br><span class="line">    既包含类型信息又包含可执行代码</span><br><span class="line">    可以被编译为 .<span class="property">js</span> 文件，然后，执行代码</span><br><span class="line">    用途：编写程序代码的地方</span><br><span class="line"></span><br><span class="line">.<span class="property">d</span>.<span class="property">ts</span> 文件:</span><br><span class="line">    只包含类型信息的类型声明文件</span><br><span class="line">    不会生成 .<span class="property">js</span> 文件，仅用于提供类型信息，在.<span class="property">d</span>.<span class="property">ts</span> 文件中不允许出现可执行的代码，只用于提供类型</span><br><span class="line">    用途：为 <span class="variable constant_">JS</span> 提供类型信息</span><br><span class="line"></span><br><span class="line">总结:</span><br><span class="line">    .<span class="property">ts</span> 是 implementation（代码实现文件）</span><br><span class="line"></span><br><span class="line">    .<span class="property">d</span>.<span class="property">ts</span> 是 declaration（类型声明文件）</span><br><span class="line"></span><br><span class="line">    如果要为 <span class="variable constant_">JS</span> 提供类型信息，要使用 .<span class="property">d</span>.<span class="property">ts</span> 文件</span><br></pre></td></tr></table></figure><h3 id="类型声明文件-内置"><a href="#类型声明文件-内置" class="headerlink" title="类型声明文件-内置"></a>类型声明文件-内置</h3><p>TS为JS 运行时可用的所有标准化内置API都提供了声明文件</p><p>在使用数组时，数组所有方法都会有相应的代码提示以及类型信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strs = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="comment">// ctrl+鼠标左键点击查看</span></span><br><span class="line">strs.<span class="property">forEach</span></span><br></pre></td></tr></table></figure><h3 id="类型声明文件-第三方库"><a href="#类型声明文件-第三方库" class="headerlink" title="类型声明文件-第三方库"></a>类型声明文件-第三方库</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    目前，几乎所有常用的第三方库都有相应的类型声明文件</span><br><span class="line"></span><br><span class="line">    第三方库的类型声明文件有两种存在形式：</span><br><span class="line">    1,库自带类型声明文件 </span><br><span class="line">    2,由DefinitelyTyped提供</span><br><span class="line"></span><br><span class="line">库自带类型声明文件：比如，axios</span><br><span class="line"></span><br><span class="line">    查看 node_modules/axios 目录</span><br><span class="line">    解释：这种情况下，正常导入该库，TS 就会自动加载库自己的类型声明文件，以提供该库的类型声明</span><br><span class="line">    VSCode 中如何找到它的类型声明文件？就是在 import 导入包的时候，会读取 axios 的 package.json 中的 types 字段，来加载指定的类型声明文件</span><br><span class="line"></span><br><span class="line">由 DefinitelyTyped 提供</span><br><span class="line">    DefinitelyTyped 是一个 github 仓库，用来提供高质量 TypeScript 类型声明，DefinitelyTyped 链接</span><br><span class="line">    可以通过 npm/yarn 来下载该仓库提供的 TS 类型声明包，这些包的名称格式为：@types/*，比如，@types/react、@types/lodash 等</span><br><span class="line">    在实际项目开发时，如果你使用的第三方库没有自带的声明文件，VSCode 会给出明确的提示</span><br><span class="line">    import _ from &#x27;lodash&#x27;;</span><br><span class="line"></span><br><span class="line">    // 在 VSCode 中，鼠标移上去，查看 &#x27;lodash&#x27; 前面的提示</span><br><span class="line">    解释：当安装 @types/* 类型声明包后，TS 也会自动加载该类声明包，以提供该库的类型声明</span><br></pre></td></tr></table></figure><h3 id="类型声明文件-自定义"><a href="#类型声明文件-自定义" class="headerlink" title="类型声明文件-自定义"></a>类型声明文件-自定义</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">项目内共享类型</span><br><span class="line"></span><br><span class="line">    如果多个 .ts 文件中都用到同一个类型，此时可以创建 .d.ts 文件提供该类型，实现类型共享</span><br><span class="line"></span><br><span class="line">操作步骤:</span><br><span class="line"></span><br><span class="line">    创建 index.d.ts 类型声明文件</span><br><span class="line"></span><br><span class="line">    创建需要共享的类型，并使用 export 导出（TS 中的类型也可以使用 import/export 实现模块化功能）</span><br><span class="line"></span><br><span class="line">    在需要使用共享类型的 .ts 文件中，通过 import 导入即可（.d.ts 后缀导入时，直接省略）</span><br><span class="line"></span><br><span class="line">为已有 JS 文件提供类型声明</span><br><span class="line"></span><br><span class="line">    在将 JS 项目迁移到 TS 项目时，为了让已有的 .js 文件有类型声明</span><br><span class="line">    成为库作者，创建库给其他人使用</span><br></pre></td></tr></table></figure><h3 id="类型声明文件的使用说明"><a href="#类型声明文件的使用说明" class="headerlink" title="类型声明文件的使用说明"></a>类型声明文件的使用说明</h3><p>说明 1：TS 项目中也可以使用 .js 文件</p><p>说明 2：在导入 .js 文件时，TS 会自动加载与 .js 同名的 .d.ts 文件，以提供类型声明</p><pre><code>比如，在 导入 index.js 时，会自动加载 index.d.ts 类型声明文件</code></pre><p>declare 关键字：用于类型声明，为其他地方（比如，.js 文件）已存在的变量声明类型，而不是创建一个新的变量</p><pre><code>1.对于 type、interface 等这些明确就是 TS 类型的（只能在 TS 中使用的)，可以省略 declare 关键字2.对于 let、function 等具有双重含义（在 JS、TS 中都能用），应该使用 declare 关键字，明确指定此处用于类型声明</code></pre><h4 id="js-文件需要在-TS-代码中使用"><a href="#js-文件需要在-TS-代码中使用" class="headerlink" title=".js 文件需要在 TS 代码中使用"></a>.js 文件需要在 TS 代码中使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils.js 文件：</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> songName = <span class="string">&#x27;痴心绝对&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> position = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(direction);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fomartPoint</span> = (<span class="params">point</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前坐标：&#x27;</span>, point);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; count, songName, position, add, changeDirection, fomartPoint &#125;;</span><br></pre></td></tr></table></figure><h4 id="创建上面-js-文件的类型声明文件"><a href="#创建上面-js-文件的类型声明文件" class="headerlink" title="创建上面 .js 文件的类型声明文件"></a>创建上面 .js 文件的类型声明文件</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils.d.ts 文件：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">songName</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// position 变量</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Position</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">position</span>: <span class="title class_">Position</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add 函数</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// changeDirection 函数</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Direction</span> = <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span> | <span class="string">&#x27;top&#x27;</span> | <span class="string">&#x27;bottom&#x27;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: Direction</span>): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fomartPoint 函数</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FomartPoint</span> = <span class="function">(<span class="params">point: Position</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">fomartPoint</span>: <span class="title class_">FomartPoint</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    songName,</span><br><span class="line">    position,</span><br><span class="line">    add,</span><br><span class="line">    changeDirection,</span><br><span class="line">    <span class="title class_">FomartPoint</span>,</span><br><span class="line">    fomartPoint,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="在文件中导入上述-js-文件，查看是否有类型提示"><a href="#在文件中导入上述-js-文件，查看是否有类型提示" class="headerlink" title="在文件中导入上述 .js 文件，查看是否有类型提示"></a>在文件中导入上述 .js 文件，查看是否有类型提示</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    songName,</span><br><span class="line">    position,</span><br><span class="line">    add,</span><br><span class="line">    changeDirection,</span><br><span class="line">    <span class="title class_">FomartPoint</span>,</span><br><span class="line">    fomartPoint,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0</title>
      <link href="/2022/09/27/Vue2/"/>
      <url>/2022/09/27/Vue2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2022/09/27/React/"/>
      <url>/2022/09/27/React/</url>
      
        <content type="html"><![CDATA[<h2 id="react框架介绍"><a href="#react框架介绍" class="headerlink" title="react框架介绍"></a>react框架介绍</h2><ul><li>react是facebook公司前端团队开发和维护的一个前端框架</li></ul><h3 id="react特点"><a href="#react特点" class="headerlink" title="react特点"></a>react特点</h3><ul><li>react也是数据驱动视图(一般不建议操作DOM)</li><li>react基于组件化的开发方式</li><li>react的模板编译中使用了虚拟DOM技术</li><li>react中没有实现表单元素的自动双向绑定</li></ul><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="通过CDN地址下载"><a href="#通过CDN地址下载" class="headerlink" title="通过CDN地址下载"></a>通过CDN地址下载</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--react.development.js: react的核心包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@17/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--react-dom.development.js: 和Dom操作相关的功能封装包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过npm在线安装"><a href="#通过npm在线安装" class="headerlink" title="通过npm在线安装"></a>通过npm在线安装</h3><ol><li><p>初始化项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li><p>下载react</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react react-dom</span><br></pre></td></tr></table></figure></li></ol><h2 id="react基本使用流程"><a href="#react基本使用流程" class="headerlink" title="react基本使用流程"></a>react基本使用流程</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1-引入react核心包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./libs/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2-引用react-dom扩展包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./libs/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 应用程序的挂载点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// React.createElement(&#x27;元素名称&#x27;,&#123;/*属性*/&#125;,&#x27;子节点1&#x27;,&#x27;子节点2&#x27;): 创建一个元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建子元素img</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> img=<span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>,&#123;<span class="attr">src</span>:<span class="string">&#x27;imgs/3.jpg&#x27;</span>&#125;,<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建子元素h1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> h1=<span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,&#123;<span class="attr">title</span>:<span class="string">&#x27;这是一个标题标签&#x27;</span>&#125;,<span class="string">&#x27;hello react!!!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建父元素div</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> div=<span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>,&#123;&#125;,img,h1);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ReactDOM.render(&#x27;元素对象&#x27;,&#x27;挂载节点的DOM对象&#x27;): 将React.createElement()创建的元素对象挂载到视图中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(div,<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jsx语法"><a href="#jsx语法" class="headerlink" title="jsx语法"></a>jsx语法</h2><ul><li><p>jsx是facebook公司专门针对react框架的视图构建设计的一种高级语法, 目前主要应用于react应用的视图构建中</p></li><li><p>jsx就是在js的语法基础之上扩充了xml语法的特性(允许在js的语法范围内书写html标签)</p></li><li><p>js语法不能直接运行于浏览器之上, 必须借助babel语法转换工具对其进行语法转换</p></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><strong>单标签必须使用<code>/</code>作为结束</strong></li><li><strong>双标签必须有开始有结束</strong></li><li><strong>如果某一些html标签的属性和js中关键词出现命名冲突, 必须特殊处理</strong><ol><li>需要使用className代替class属性引用css类选择器</li><li>需要使用htmlFor代替label标签的for属性</li></ol></li><li><strong>如果某一个html元素的属性是由多个英文单词组成, 必须改写成小驼峰的方式(如<code>cellSpacing, cellPadding</code>)</strong></li></ol><h3 id="jsx中输出变量"><a href="#jsx中输出变量" class="headerlink" title="jsx中输出变量"></a>jsx中输出变量</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msg=<span class="string">&#x27;hello react!!!&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> img=<span class="string">&#x27;./imgs/6.jpg&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age=<span class="number">18</span>;</span><br><span class="line"><span class="comment">// 自定义方法实现字符串翻转的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;msg&#125;&lt;/h1&gt;</span><br><span class="line">&#123;<span class="comment">/* 字符串连接 */</span>&#125;</span><br><span class="line">&lt;h1&gt;&#123;msg+<span class="string">&#x27;~~~&#x27;</span>&#125;&lt;/h1&gt;</span><br><span class="line">&#123;<span class="comment">/* 调用系统方法 */</span>&#125;</span><br><span class="line">&lt;h1&gt;&#123;msg.<span class="title function_">toUpperCase</span>()&#125;&lt;/h1&gt;</span><br><span class="line">&#123;<span class="comment">/* 调用自定义方法 */</span>&#125;</span><br><span class="line">&lt;h1&gt;&#123;<span class="title function_">reverse</span>(msg)&#125;&lt;/h1&gt;</span><br><span class="line">&#123;<span class="comment">/* 数学运算*/</span>&#125;</span><br><span class="line">&lt;h1&gt;&#123;age*<span class="number">10</span>&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h3 id="jsx中动态设置属性"><a href="#jsx中动态设置属性" class="headerlink" title="jsx中动态设置属性"></a>jsx中动态设置属性</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img=<span class="string">&#x27;./imgs/6.jpg&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&#123;img&#125; alt=<span class="string">&quot;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="jsx注释"><a href="#jsx注释" class="headerlink" title="jsx注释"></a>jsx注释</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/*  注释语法  */</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="jsx中实现条件渲染"><a href="#jsx中实现条件渲染" class="headerlink" title="jsx中实现条件渲染"></a>jsx中实现条件渲染</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/* 条件渲染: 三元表达式 */</span>&#125;</span><br><span class="line">&lt;h1&gt;&#123;age&gt;=<span class="number">18</span>?<span class="string">&#x27;已成年&#x27;</span>:<span class="string">&#x27;未成年&#x27;</span>&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h3 id="jsx中实现列表渲染"><a href="#jsx中实现列表渲染" class="headerlink" title="jsx中实现列表渲染"></a>jsx中实现列表渲染</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=[<span class="string">&#x27;vue&#x27;</span>,<span class="string">&#x27;react&#x27;</span>,<span class="string">&#x27;angular&#x27;</span>];</span><br><span class="line">   <span class="comment">// map方法有返回值, 返回值是回调函数中的返回值组成的数组</span></span><br><span class="line">   <span class="comment">// const list=arr.map(function(item,index,arr)&#123;</span></span><br><span class="line">   <span class="comment">//     // console.log(item,index,arr);</span></span><br><span class="line">   <span class="comment">//     return &lt;p&gt;&#123;item&#125;&lt;/p&gt;;</span></span><br><span class="line">   <span class="comment">// &#125;);</span></span><br><span class="line">   <span class="comment">// 必须给每一个直接子元素添加唯一不重复的key属性</span></span><br><span class="line">   <span class="comment">// const list=arr.map(item=&gt;&lt;h3 key=&#123;item&#125;&gt;&#123;item&#125;&lt;/h3&gt;);</span></span><br><span class="line">   <span class="keyword">const</span> div=<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           &#123;arr.map(item=&gt;<span class="tag">&lt;<span class="name">h3</span> <span class="attr">key</span>=<span class="string">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   <span class="comment">// 渲染视图</span></span><br><span class="line">   <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(div,<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>));</span><br></pre></td></tr></table></figure><ul><li>注意 : 必须给每一个子元素添加一个唯一不重复的key属性, 作用是在数据层和视图层建立一一对应关系, 在更新数据的时候可以将视图层的状态同步过来</li></ul><h3 id="jsx中渲染富文本"><a href="#jsx中渲染富文本" class="headerlink" title="jsx中渲染富文本"></a>jsx中渲染富文本</h3><ul><li><p>使用<code>dangerouslySetInnerHTML</code>属性渲染富文本</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> content=<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;新闻标题&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;img src=&quot;./imgs/6.jpg&quot;/&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建元素对象</span></span><br><span class="line"><span class="keyword">const</span> div=<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;__html:content&#125;&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 渲染视图</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(div,<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>));</span><br></pre></td></tr></table></figure></li></ul><h3 id="jsx中通过style属性设置样式"><a href="#jsx中通过style属性设置样式" class="headerlink" title="jsx中通过style属性设置样式"></a>jsx中通过style属性设置样式</h3><ul><li><p>如果某个css属性是由多个英文单词使用<code>-</code>链接, 必须改写成小驼峰的命名方式</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 样式对象: 如果某个css属性是由多个英文单词使用`-`链接, 必须改写成小驼峰的命名方式</span></span><br><span class="line"><span class="keyword">const</span> styleObj=&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,<span class="attr">fontSize</span>:<span class="string">&#x27;30px&#x27;</span>,<span class="attr">backgroundColor</span>:<span class="string">&#x27;#EEE&#x27;</span>&#125;</span><br><span class="line"><span class="comment">// 创建元素对象</span></span><br><span class="line"><span class="keyword">const</span> div=<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 外层&#123;&#125;表示这个地方是js代码, 内层&#123;&#125;表示这是一个js对象*/&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;styleObj&#125;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      <span class="comment">// 渲染视图</span></span><br><span class="line">      <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(div,<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>));</span><br></pre></td></tr></table></figure></li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><ul><li><p>使用函数的方式定义组件</p></li><li><p>特点: 函数组件默认没有自己的状态数据和生命周期</p></li><li><p>定义</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件名必须首字母大写</span></span><br><span class="line"><span class="keyword">function</span> 组件名()&#123;</span><br><span class="line">    <span class="comment">// 必须返回一段视图标签, 必须有一个唯一的根标签</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用: 当做自定义标签调用即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">组件名</span>&gt;</span><span class="tag">&lt;/<span class="name">组件名</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><ul><li><p>使用class类的方式定义的组件</p></li><li><p>特点: 类组件有自己的状态数据和生命周期</p></li><li><p>定义</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件名必须首字母大写, 需要继承系统基础类React.Component</span></span><br><span class="line"><span class="keyword">class</span> 组件名 <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="property">Component</span>&#123;</span><br><span class="line">    <span class="comment">// 必须提供渲染方法</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 必须返回对应的视图, 必须有一个唯一的根标签</span></span><br><span class="line">        <span class="keyword">return</span> &lt;div&gt;&lt;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用:  当做自定义标签调用即可</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;组件名&gt;&lt;/组件名&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="state状态数据"><a href="#state状态数据" class="headerlink" title="state状态数据"></a>state状态数据</h2><h3 id="constructor构造器的外部定义"><a href="#constructor构造器的外部定义" class="headerlink" title="constructor构造器的外部定义"></a>constructor构造器的外部定义</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义状态数据</span></span><br><span class="line">    state=&#123;</span><br><span class="line">        <span class="attr">pageTitle</span>:<span class="string">&#x27;网站首页123&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染方法</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&#x27;#<span class="attr">EEE</span>&#x27;,<span class="attr">padding:20</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.pageTitle&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="constructor构造器的内部定义"><a href="#constructor构造器的内部定义" class="headerlink" title="constructor构造器的内部定义"></a>constructor构造器的内部定义</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="state状态数据的更新"><a href="#state状态数据的更新" class="headerlink" title="state状态数据的更新"></a>state状态数据的更新</h3><ul><li><p>this.setState(): </p><ul><li><p>作用: 更新状态数据</p></li><li><p>特点: 异步方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;&#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 执行完数据更新之后, 会自动调用回调函数</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h3><ul><li>语法格式: on+事件名称&#x3D;{事件处理函数}</li><li>注意: 事件名称如果有多个英文单词组成需要改写成驼峰命名方式</li></ul><h3 id="事件处理函数中this指向"><a href="#事件处理函数中this指向" class="headerlink" title="事件处理函数中this指向"></a>事件处理函数中this指向</h3><blockquote><p>react中事件处理函数内部this默认不是指向组件对象的</p></blockquote><ol><li><p>通过箭头函数让事件处理函数内部this指向组件对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="comment">// 通过super()调用父类的构造器</span></span><br><span class="line">         <span class="variable language_">super</span>();</span><br><span class="line">        <span class="comment">// 定义state状态数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">            <span class="attr">pageTitle</span>:<span class="string">&#x27;网站首页&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染方法</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&#x27;#<span class="attr">EEE</span>&#x27;,<span class="attr">padding:20</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.pageTitle&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.state.msg&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandle&#125;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">                &#123;/*注意: react事件注册中, 事件处理函数不能加() */&#125;</span></span><br><span class="line"><span class="language-xml">                &#123;/* <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandle()&#125;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    clickHandle=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pageTitle</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过bind方法修改事件处理函数内部this, 让其指向组件对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 定义类组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="comment">// 通过super()调用父类的构造器</span></span><br><span class="line">         <span class="variable language_">super</span>();</span><br><span class="line">        <span class="comment">// 定义state状态数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">            <span class="attr">pageTitle</span>:<span class="string">&#x27;网站首页&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染方法</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&#x27;#<span class="attr">EEE</span>&#x27;,<span class="attr">padding:20</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.pageTitle&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.state.msg&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 通过bind方法修改事件处理函数内部this指向, 使其指向组件对象*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandle.bind(this)&#125;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按钮点击事件处理函数</span></span><br><span class="line">    <span class="title function_">clickHandle</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;按钮被点击了&#x27;);</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pageTitle</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><ol><li><p>如果不需要给事件处理函数传递参数, 在事件处理函数定义的位置通过形参直接接收系统自动注入的事件对象即可</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 定义类组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="comment">// 通过super()调用父类的构造器</span></span><br><span class="line">         <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onKeyUp</span>=<span class="string">&#123;this.keyupHandle&#125;/</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 键盘事件keyup事件处理函数</span></span><br><span class="line">    <span class="title function_">keyupHandle</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果需要给事件处理函数传递参数, , 则需要在箭头函数定义的位置通过形参接收系统自动注入的事件对象, 进而传递给真正的事件处理函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 定义类组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="comment">// 通过super()调用父类的构造器</span></span><br><span class="line">         <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onKeyUp</span>=<span class="string">&#123;(event)</span>=&gt;</span>this.keyupHandle(event,&#x27;hello&#x27;)&#125;/&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 键盘事件keyup事件处理函数</span></span><br><span class="line">    <span class="title function_">keyupHandle</span>(<span class="params">event,msg</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h2><ul><li>react-react-app是react官提供的一个脚手架工具</li><li>react-react-app底层基于webpack前端构建工具</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i create-react-app -g</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app 项目名称</span><br></pre></td></tr></table></figure><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><ol><li><p>启动开发服务器( 在项目根目录下运行如下命令)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure></li><li><p>开发服务器默认监听端口号3000</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000</span></span><br></pre></td></tr></table></figure></li><li><p>修改开发服务器默认监听端口</p><blockquote><p>在package.json中做如下修改</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;set port=5000 &amp;&amp; react-scripts start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>项目打包(在项目根目录下运行如下命令)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li></ol><h3 id="vscode辅助插件"><a href="#vscode辅助插件" class="headerlink" title="vscode辅助插件"></a>vscode辅助插件</h3><ul><li>ES7 React&#x2F;Redux&#x2F;GraphQL&#x2F;React-Native snippets<ul><li>补齐jsx标签</li><li>快捷键<ul><li>rcc+tab: 自动生成类组件的基础代码</li><li>rfc+tab: 自动生成函数组件的基础代码</li></ul></li></ul></li></ul><h3 id="create-react-app中给css添加作用域"><a href="#create-react-app中给css添加作用域" class="headerlink" title="create-react-app中给css添加作用域"></a>create-react-app中给css添加作用域</h3><ol><li><p>在css文件命中加入<code>.module</code>后缀, 如<code>home.module.css</code></p><blockquote><p>assets&#x2F;css&#x2F;home.css</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">10px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在组件中需要接收样式对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入页面样式文件</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&#x27;../assets/css/home.module.css&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>在元素上通过样式对象应用对应的选择器</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span> <span class="attr">style.container</span> &#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网站首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li><p>在子组件的调用标签上添加自定义属性, 将需要传递的数据作为自定义属性的值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Child</span> msgToChild=&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">msgToChild</span>&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>在子组件中接收父组件通过自定义属性传递的数据</p><ol><li><p>如果子组件是函数组件, 通过函数的形参接收父组件传递的数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件是函数组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&#x27;<span class="attr">lightblue</span>&#x27;,<span class="attr">padding:10</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Child子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;props.msgToChild&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如果子组件是类组件, 直接通过系统属性<code>this.props</code>接收到父组件传递的数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 子组件是类组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Child1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&#x27;<span class="attr">lightgreen</span>&#x27;,<span class="attr">padding:10</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Child1子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.props.msgToChild&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="子父组件通信"><a href="#子父组件通信" class="headerlink" title="子父组件通信"></a>子父组件通信</h3><h4 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li><p>在父组件中定义一个方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义方法, 接收子组件传递过来的数据</span></span><br><span class="line"><span class="title function_">getData</span>(<span class="params">params</span>)&#123;</span><br><span class="line">    <span class="comment">// console.log(params);</span></span><br><span class="line">    <span class="comment">// 更新状态数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">msgFromChild</span>:params&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过自定义属性的方式将定义好的方法传递给子组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/* 调用子组件 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Child1</span> getData=&#123;<span class="variable language_">this</span>.<span class="property">getData</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>在子组件中, 调用父组件通过自定义属性传递过来的方法, 将需要传递的数据作为方法的实参</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Child1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&#x27;<span class="attr">lightgreen</span>&#x27;,<span class="attr">padding:10</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Child1子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.clickHandle()&#125;&gt;发送数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 按钮点击事件处理函数</span></span><br><span class="line">    <span class="title function_">clickHandle</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">getData</span>(<span class="string">&#x27;来自子组件Child1的数据&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="非父子组件通信"><a href="#非父子组件通信" class="headerlink" title="非父子组件通信"></a>非父子组件通信</h3><h4 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li><p>下载自定义事件工具events</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i events</span><br></pre></td></tr></table></figure></li><li><p>封装自定义事件工具</p><blockquote><p>utils.events.js</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入自定义事件工具包events</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Events</span> <span class="keyword">from</span> <span class="string">&#x27;events&#x27;</span>;</span><br><span class="line"><span class="comment">// 创建实例对象</span></span><br><span class="line"><span class="keyword">const</span> events=<span class="keyword">new</span> <span class="title class_">Events</span>();</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> events;</span><br></pre></td></tr></table></figure></li><li><p>在数据发送发组件中调用<code>events.emit()</code>触发自定义事件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入自定义事件工具包</span></span><br><span class="line"><span class="keyword">import</span> events <span class="keyword">from</span> <span class="string">&#x27;../utils/events&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state=&#123;</span><br><span class="line">        <span class="comment">// 发送给兄弟组件Child1的数据</span></span><br><span class="line">        <span class="attr">list</span>:[<span class="string">&#x27;苹果&#x27;</span>,<span class="string">&#x27;香蕉&#x27;</span>,<span class="string">&#x27;草莓&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&#x27;<span class="attr">lightblue</span>&#x27;,<span class="attr">padding:10</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Child子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.sendData()&#125;&gt;发送数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 按钮点击事件处理函数</span></span><br><span class="line">    <span class="title function_">sendData</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 触发自定义事件</span></span><br><span class="line">        events.<span class="title function_">emit</span>(<span class="string">&#x27;message&#x27;</span>,<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在数据接收方组件中调用<code>events.on()</code>监听自定义事件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入自定义事件工具包</span></span><br><span class="line"><span class="keyword">import</span> events <span class="keyword">from</span> <span class="string">&#x27;../utils/events&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Child1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state=&#123;</span><br><span class="line">        <span class="comment">// 接收兄弟组件传递过来的数据</span></span><br><span class="line">        <span class="attr">fruitList</span>:[]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 监听自定义事件</span></span><br><span class="line">        events.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>,<span class="function">(<span class="params">params</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// console.log(params,111);</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">fruitList</span>:params&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&#x27;<span class="attr">lightgreen</span>&#x27;,<span class="attr">padding:10</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Child1子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;</span></span><br><span class="line"><span class="language-xml">                        this.state.fruitList.map((item,index)=&gt;(</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">                        ))</span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="表单元素处理"><a href="#表单元素处理" class="headerlink" title="表单元素处理"></a>表单元素处理</h2><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><ul><li>手动实现表单元素双向数据绑定的过程</li></ul><h4 id="实现步骤-3"><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li><p>定义一个<code>state</code>状态数据, 和表单元素进行绑定</p></li><li><p>在表单元素上注册<code>change</code>事件, 在<code>change</code>事件处理函数中手动获取表单内容同步到数据层</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="comment">// 定义状态数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">            <span class="comment">// 和input输入框进行绑定的数据</span></span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">            <span class="comment">// 和单选框进行绑定的数据</span></span><br><span class="line">            <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">            <span class="comment">// 和下拉框进行绑定的数据</span></span><br><span class="line">            <span class="attr">job</span>:<span class="string">&#x27;自由职业&#x27;</span>,</span><br><span class="line">            <span class="comment">// 和复选框进行绑定的数据</span></span><br><span class="line">            <span class="attr">hobby</span>:[<span class="string">&#x27;读书&#x27;</span>,<span class="string">&#x27;敲代码&#x27;</span>,<span class="string">&#x27;写字&#x27;</span>],</span><br><span class="line">            <span class="comment">// 和文本域进行绑定的数据</span></span><br><span class="line">            <span class="attr">introduce</span>:<span class="string">&#x27;个人介绍&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;form-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.state.sex&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.state.job&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.state.hobby&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.state.introduce&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span>=&gt;</span>this.intputHandler(e)&#125; value=&#123;this.state.name&#125; </span></span><br><span class="line"><span class="language-xml">                    type=&quot;text&quot; placeholder=&quot;请输入内容&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.sex</span>===<span class="string">&#x27;男&#x27;</span>&#125;  <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span>=&gt;</span>this.setState(&#123;sex:e.target.value&#125;)&#125; value=&quot;男&quot;/&gt; 男</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.sex</span>===<span class="string">&#x27;女&#x27;</span>&#125; <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span>=&gt;</span>this.setState(&#123;sex:e.target.value&#125;)&#125; value=&quot;女&quot;/&gt; 女</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">select</span> <span class="attr">defaultValue</span>=<span class="string">&#123;this.state.job&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span>=&gt;</span>this.setState(&#123;job:e.target.value&#125;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择职业<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;公务员&quot;</span>&gt;</span>公务员<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;程序员&quot;</span>&gt;</span>程序员<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;自由职业&quot;</span>&gt;</span>自由职业<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.hobby.includes(</span>&#x27;<span class="attr">读书</span>&#x27;)&#125; <span class="attr">onChange</span>=<span class="string">&#123;e</span>=&gt;</span>this.hobbyHandler(e)&#125; type=&quot;checkbox&quot; value=&quot;读书&quot;/&gt; 读书</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.hobby.includes(</span>&#x27;<span class="attr">写字</span>&#x27;)&#125; <span class="attr">onChange</span>=<span class="string">&#123;e</span>=&gt;</span>this.hobbyHandler(e)&#125; type=&quot;checkbox&quot; value=&quot;写字&quot;/&gt; 写字</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.hobby.includes(</span>&#x27;<span class="attr">敲代码</span>&#x27;)&#125; <span class="attr">onChange</span>=<span class="string">&#123;e</span>=&gt;</span>this.hobbyHandler(e)&#125; type=&quot;checkbox&quot; value=&quot;敲代码&quot;/&gt; 敲代码</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入个人介绍&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.introduce&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">onChange</span>=<span class="string">&#123;e</span>=&gt;</span>this.setState(&#123;introduce:e.target.value&#125;)&#125; cols=&quot;30&quot; rows=&quot;3&quot;&gt;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// input输入框的change事件处理函数</span></span><br><span class="line">    <span class="title function_">intputHandler</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="comment">// 手动同步用户输入的内容到数据层</span></span><br><span class="line">        <span class="comment">// console.log(e.target.value);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">name</span>:e.<span class="property">target</span>.<span class="property">value</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 复选框change事件处理函数</span></span><br><span class="line">    <span class="title function_">hobbyHandler</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果用户选择了复选框, 获取复选框的value, 追加到this.state.hobby数组中</span></span><br><span class="line">        <span class="comment">// 如果用户取消了选择, 从this.state.hobby中移出对应的数组元素</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">hobby</span>.<span class="title function_">includes</span>(e.<span class="property">target</span>.<span class="property">value</span>))&#123;</span><br><span class="line">            <span class="comment">// 移出对应的数组元素</span></span><br><span class="line">            <span class="comment">// 根据数组元素获取数组索引</span></span><br><span class="line">            <span class="keyword">const</span> index=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">hobby</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span>=&gt;</span>item===e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="comment">// 根据数组索引删除数组元素</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">hobby</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">hobby</span>.<span class="title function_">push</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通知视图更新</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li>描述react组件从挂载, 运行, 到销毁的过程</li></ul><h3 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h3><ul><li>react组件从挂载, 运行, 到销毁阶段, 自动执行的一些系列函数</li></ul><h3 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h3><ul><li>componentWillMount: 组件即将挂载<ul><li>特点: 已经完成了数据和方法的创建, 但是还没有完成视图的挂载</li><li>执行次数: 只执行1次</li></ul></li><li>render: 渲染视图(将<code>jsx</code>转换成浏览器能识别的代码)<ul><li>特点: 已经完成了数据和方法的创建, 但是还没有完成视图的挂载</li><li>执行次数: 挂载阶段只执行1次</li></ul></li><li>componentDidMount: 组件已经完成挂载<ul><li>特点:  已经完成了数据和方法的创建, 并且完成视图的挂载</li><li>执行次数: 只执行1次</li></ul></li></ul><h3 id="运行阶段"><a href="#运行阶段" class="headerlink" title="运行阶段"></a>运行阶段</h3><ul><li><p>componentWillReceiveProps: 组件接收的外部数据更新的时候自动执行</p><ul><li>系统参数<ul><li>nextProps: 系统自动注入, 表示更新之后的props数据</li><li>nextState: 系统自动注入, 表示更新之后的state数据</li></ul></li></ul></li><li><p>shouldComponentUpdate: 是否要执行组件更新, 如果显示声明了该钩子函数, 一定要在其内部返回一个布尔类型的数据, true表要执行组件更新, false表示不执行组件更新</p><ul><li>应用场景: 一般使用来进行性能优化</li><li>特点: 数据和视图都没有完成更新</li><li>系统参数<ul><li>nextProps: 系统自动注入, 表示更新之后的props数据</li><li>nextState: 系统自动注入, 表示更新之后的state数据</li></ul></li></ul></li><li><p>componentWillUpdate: 组件即将更新</p><ul><li>特点: 数据和视图都没有完成更新</li><li>系统参数<ul><li>nextProps: 系统自动注入, 表示更新之后的props数据</li><li>nextState: 系统自动注入, 表示更新之后的state数据</li></ul></li></ul></li><li><p>render: 重新渲染视图</p><ul><li>特点: 已经完成了数据和视图的更新( 还没有将更新之后的视图挂载到DOM树上 )</li></ul></li><li><p>componentDidUpdate: 组件完成更新</p><ul><li>特点: 数据和视图都已经完成了更新</li><li>系统参数<ul><li>prevProps: 系统自动注入, 表示更新之前props数据</li><li>prevState: 系统自动注入, 表示更新之后的state数据</li></ul></li></ul></li></ul><h3 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h3><ul><li>componetnWillUnmount: 组件即将销毁<ul><li>执行次数: 只执行1次</li></ul></li></ul><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><h3 id="写法1"><a href="#写法1" class="headerlink" title="写法1"></a>写法1</h3><ol><li><p>在目标元素上添加ref属性, 指定一个字符串作为ref属性的值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 ref=<span class="string">&quot;h1Ref&quot;</span>&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>在逻辑层通过<code>this.refs.h1Ref</code>获取元素对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">h1Ref</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="写法2"><a href="#写法2" class="headerlink" title="写法2"></a>写法2</h3><ol><li><p>在目标元素上添加ref属性, 指定一个箭头函数作为ref属性的值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/* dom: 系统自动注入的参数, 表示ref属性所在的元素对象 */</span>&#125;</span><br><span class="line">&lt;h1 ref=&#123;<span class="function"><span class="params">dom</span>=&gt;</span><span class="variable language_">this</span>.<span class="property">h1Ref</span>=dom&#125;&gt;helo react!!!!&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>在逻辑层获取元素对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">h1Ref</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="写法3"><a href="#写法3" class="headerlink" title="写法3"></a>写法3</h3><ol><li><p>创建一个ref对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1-创建ref对象</span></span><br><span class="line">h1Ref=<span class="title function_">createRef</span>();</span><br></pre></td></tr></table></figure></li><li><p>在目标元素上引用ref对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 ref=&#123;<span class="variable language_">this</span>.<span class="property">h1Ref</span>&#125;&gt;helo react!!!!&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>在逻辑层获取元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">h1Ref</span>.<span class="property">current</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="react系统内置组件"><a href="#react系统内置组件" class="headerlink" title="react系统内置组件"></a>react系统内置组件</h2><h3 id="React-Fragment"><a href="#React-Fragment" class="headerlink" title="React.Fragment"></a>React.Fragment</h3><ul><li><p>react系统内置的组件</p></li><li><p>作用: 给组件的视图提供一个唯一的根元素, 解析之后是不会生成额外的标签包裹</p></li><li><p>使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">React</span>.<span class="property">Fragment</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="title class_">React</span>.<span class="property">Fragment</span>&gt;</span><br><span class="line">&#123;<span class="comment">/* 简写 */</span>&#125;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&lt;/&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="React-PureComponent"><a href="#React-PureComponent" class="headerlink" title="React.PureComponent"></a>React.PureComponent</h3><ul><li><p>react系统内置类</p></li><li><p>作用: 可以作为类组件的父类, 可以避免一些无效的组件更新</p></li><li><p>用法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 组件名称 <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="property">PureComponent</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="非受控组件-1"><a href="#非受控组件-1" class="headerlink" title="非受控组件"></a>非受控组件</h2><ul><li><p>通过ref属性操作表单元素</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>,createRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">// 创建ref对象</span></span><br><span class="line">    password=<span class="title function_">createRef</span>();</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;dom</span>=&gt;</span>this.username=dom&#125; type=&quot;text&quot; placeholder=&quot;请输入用户名&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.password&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.login()&#125;&gt;立即登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.setData()&#125;&gt;自动设置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">login</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 非受控组件的方式获取表单元素的内容</span></span><br><span class="line">        <span class="keyword">const</span> username=<span class="variable language_">this</span>.<span class="property">username</span>.<span class="property">value</span>;</span><br><span class="line">        <span class="keyword">const</span> password=<span class="variable language_">this</span>.<span class="property">password</span>.<span class="property">current</span>.<span class="property">value</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username,password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setData</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 设置账号</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">username</span>.<span class="property">value</span>=<span class="string">&#x27;jack&#x27;</span>;</span><br><span class="line">        <span class="comment">// 设置密码</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">password</span>.<span class="property">current</span>.<span class="property">value</span>=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-高阶组件"><a href="#2-高阶组件" class="headerlink" title="2-高阶组件"></a>2-高阶组件</h2><ul><li><p>高阶组件是react中复用组件的一种策略</p></li><li><p>本质: 是一个函数, 这个函数可以接收一个组件作为参数, 同时返回一个全新的组件</p></li></ul><h2 id="3-过渡动画"><a href="#3-过渡动画" class="headerlink" title="3-过渡动画"></a>3-过渡动画</h2><ul><li><p>需要借助<code>react-transition-group</code>过渡动画工具包</p></li><li><p>安装</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-transition-group</span><br></pre></td></tr></table></figure></li></ul><h3 id="单元素过渡动画"><a href="#单元素过渡动画" class="headerlink" title="单元素过渡动画"></a>单元素过渡动画</h3><h4 id="自定义过渡动画选择器"><a href="#自定义过渡动画选择器" class="headerlink" title="自定义过渡动画选择器"></a>自定义过渡动画选择器</h4><ol><li><p>导入单元素过渡动画组件<code>CSSTransition</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">CSSTrantision</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-transition-group&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>CSSTrantision</code>过渡动画组件将目标元素包裹</p><ul><li>属性<ul><li>in: 引用控制元素显示状态的数据, 一般为布尔类型</li><li>timeout: 指定过渡效果持续时长</li><li>unmountOnExit: 必须添加, 否则无法实现效果</li><li>classNames: 指定系统内置过渡动画选择器的前缀</li><li>appear: 让目标元素以过渡动画方式入场</li><li>onEntered: 当元素进入后, 自动执行的事件回调</li><li>onExited: 当元素离开之后, 自动执行的事件回调</li></ul></li></ul></li><li><p>实现系统内置的过渡动画选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 入场阶段 */</span></span><br><span class="line">.自定义前缀-appear&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">.自定义前缀-appear-active&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 进入阶段 */</span></span><br><span class="line">.自定义前缀-enter&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">.自定义前缀-enter-active&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 离开阶段*/</span></span><br><span class="line">.自定义前缀-exit&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">.自定义前缀-exit-active&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用第三方过渡动画类库animate-css"><a href="#使用第三方过渡动画类库animate-css" class="headerlink" title="使用第三方过渡动画类库animate.css"></a>使用第三方过渡动画类库animate.css</h4><ol><li><p>下载安装animate.css过渡动画类库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i animate.<span class="property">css</span></span><br></pre></td></tr></table></figure></li><li><p>导入animate.css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;animate.css&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>导入单元素过渡动画组件<code>CSSTransition</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">CSSTransition</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-transition-group&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>CSSTransition</code>将目标元素包裹起来</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">CSSTransition</span>&gt;</span><br><span class="line">&lt;/<span class="title class_">CSSTransition</span>&gt;</span><br></pre></td></tr></table></figure><ul><li><p>属性</p><ul><li><p>in: 引用控制元素显示状态的数据, 一般为布尔类型</p></li><li><p>timeout: 指定过渡效果持续时长</p></li><li><p>unmountOnExit: 必须添加, 否则无法实现效果</p></li><li><p>classNames: 指定不同阶段需要的过渡动画选择</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">classNames=&#123;&#123;</span><br><span class="line">            <span class="attr">appearActive</span>:<span class="string">&#x27;animate__animated animate__backInDown&#x27;</span>,</span><br><span class="line">            <span class="comment">// 指定进入过程需要的过渡动画选择器</span></span><br><span class="line">            <span class="attr">enterActive</span>:<span class="string">&#x27;animate__animated animate__backInDown&#x27;</span>,</span><br><span class="line">            <span class="comment">// 离开过程中需要的过渡动画选择器</span></span><br><span class="line">            <span class="attr">exitActive</span>:<span class="string">&#x27;animate__animated animate__backInDown&#x27;</span></span><br><span class="line">           &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>appear: 让目标元素以过渡动画方式入场</p></li><li><p>onEntered: 当元素进入后, 自动执行的事件回调</p></li><li><p>onExited: 当元素离开之后, 自动执行的事件回调</p></li></ul></li></ul></li></ol><h3 id="列表元素过渡动画"><a href="#列表元素过渡动画" class="headerlink" title="列表元素过渡动画"></a>列表元素过渡动画</h3><h4 id="自定义过渡动画选择器-1"><a href="#自定义过渡动画选择器-1" class="headerlink" title="自定义过渡动画选择器"></a>自定义过渡动画选择器</h4><ol><li><p>导入过渡动画选择器<code>CSSTransition</code>,<code>TransitionGroup</code>组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TransitionGroup</span>,<span class="title class_">CSSTransition</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-transition-group&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用<code>CSSTransition</code>组件将每一个列表元素包裹其中, 再将其包裹在<code>TransitionGroup</code>组件内部</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &lt;<span class="title class_">TransitionGroup</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">CSSTransition</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">timeout</span>=<span class="string">&#123;500&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">classNames</span>=<span class="string">&quot;slide&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">unmountOnExit</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">appear</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.del(index)&#125;&gt;&#123;item&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line">        ))</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/<span class="title class_">TransitionGroup</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>实现系统内置的过渡动画选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 入场阶段 */</span></span><br><span class="line"><span class="selector-class">.slide-appear</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-appear-active</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 进入阶段 */</span></span><br><span class="line"><span class="selector-class">.slide-enter</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-enter-active</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 离开阶段 */</span></span><br><span class="line"><span class="selector-class">.slide-exit</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-exit-active</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="实现第三方过渡动画类库animate-css"><a href="#实现第三方过渡动画类库animate-css" class="headerlink" title="实现第三方过渡动画类库animate.css"></a>实现第三方过渡动画类库animate.css</h4><ol><li><p>下载安装animate.css过渡动画类库</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i animate.<span class="property">css</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>导入animate.css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;animate.css&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>导入过渡动画选择器<code>CSSTransition</code>,<code>TransitionGroup</code>组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TransitionGroup</span>,<span class="title class_">CSSTransition</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-transition-group&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用<code>CSSTransition</code>组件将每一个列表元素包裹其中, 再将其包裹在<code>TransitionGroup</code>组件内部, 通过<code>classNames</code>属性指定不同阶段需要的过渡动画选择器</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> &#123;<span class="comment">/* component: 指定TransitionGroup解析之后生成的元素名称, 如果不想生成任何元素, 可以指定属性值null */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">TransitionGroup</span> component=&#123;<span class="literal">null</span>&#125;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">CSSTransition</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">timeout</span>=<span class="string">&#123;500&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">classNames</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">appearActive:</span>&#x27;<span class="attr">animate__animated</span> <span class="attr">animate__bounceInDown</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">enterActive:</span>&#x27;<span class="attr">animate__animated</span> <span class="attr">animate__backInLeft</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">exitActive:</span>&#x27;<span class="attr">animate__animated</span> <span class="attr">animate__backInRight</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">unmountOnExit</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">appear</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.del(index)&#125;&gt;&#123;item&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line">        ))</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/<span class="title class_">TransitionGroup</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-ant-design组件库"><a href="#4-ant-design组件库" class="headerlink" title="4-ant-design组件库"></a>4-ant-design组件库</h2><ul><li>ant-design是蚂蚁金服前端团队针对react框架开发和维护的PC端组件库</li></ul><h3 id="下载安装-1"><a href="#下载安装-1" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install antd</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>全局引入ant-design组件库的样式文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd/dist/antd.css&#x27;</span>; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>按需引入我们需要使用的组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DatePicker</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">DatePicker</span> /&gt;</span></span>, mountNode);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i @ant-design/icons</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><ol><li><p>按需导入</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RightCircleOutlined</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>当做组件使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">RightCircleOutlined</span> style=&#123;&#123;<span class="attr">fontSize</span>:<span class="number">40</span>,<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;&#125;/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="5-antd-mobile组件库"><a href="#5-antd-mobile组件库" class="headerlink" title="5-antd-mobile组件库"></a>5-antd-mobile组件库</h2><ul><li>ant-design是蚂蚁金服前端团队针对react框架开发和维护的移动端的组件库</li></ul><h3 id="下载安装-2"><a href="#下载安装-2" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i antd-mobile</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自动按需导入"><a href="#自动按需导入" class="headerlink" title="自动按需导入"></a>自动按需导入</h3><ol><li><p>下载安装<code>bable-plugin-import</code>插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-plugin-<span class="keyword">import</span> -D</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>导出项目配置文件, 在项目根目录运行如下命令(运行命令之前先将所有的改动提交到本地仓库)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run eject</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在<code>package.json</code>文件中添加配置项</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;babel&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;react-app&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">      [<span class="string">&quot;import&quot;</span>, &#123;</span><br><span class="line">        <span class="string">&quot;libraryName&quot;</span>: <span class="string">&quot;antd-mobile&quot;</span>,</span><br><span class="line">        <span class="string">&quot;style&quot;</span>: <span class="string">&quot;css&quot;</span></span><br><span class="line">      &#125;]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重启开发服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd-mobile&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Button</span> type=<span class="string">&quot;primary&quot;</span>&gt;按钮&lt;/<span class="title class_">Button</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;ghost&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-路由"><a href="#6-路由" class="headerlink" title="6-路由"></a>6-路由</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i react-router-dom</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><ul><li><p>HashRouter: 路由容器组件</p><ul><li><p>使用: 将所有和路由相关的组件包裹起来</p></li><li><p>作用: 给我们提供了带#的路由模式</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HashRouter</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">HashRouter</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="title class_">HashRouter</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>BrowserRouter: 路由容器组件</p><ul><li><p>使用: 将所有和路由相关的组件包裹起来</p></li><li><p>作用: 给我们提供了不带#的路由模式</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">BrowserRouter</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">BrowserRouter</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="title class_">BrowserRouter</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Route: 路由规则组件(同时可以充当路由占位符)</p><ul><li><p>作用: 配置路由规则</p></li><li><p>属性</p><ul><li><p>exact: 启用路由严格匹配模式</p></li><li><p>path:  指定页面跳转地址</p></li><li><p>component: 指定页面组件对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;&quot;</span>  component=&#123;&#125;/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>NavLink: 路由导航组件</p><ul><li><p>作用: 创建导航链接</p></li><li><p>属性: </p><ul><li><p>exact: 启用路由严格匹配模式</p></li><li><p>to: 指定页面跳转地址</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavLink</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">NavLink</span> to=<span class="string">&quot;&quot;</span>&gt;导航文字&lt;/<span class="title class_">NavLink</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Redirect: 路由重定向组件</p><ul><li><p>属性</p><ul><li><p>path: 访问的页面地址</p></li><li><p>to: 重定向之后的页面地址</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Redirect</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;&quot;</span> &gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Route</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Redirect</span> path=<span class="string">&quot;&quot;</span> to=<span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Switch: 避免路由重复匹配</p><ul><li><p>用法: 将路由规则组件Route包裹起来</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Switch</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">component</span>=<span class="string">&#123;&#125;/</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">component</span>=<span class="string">&#123;&#125;/</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Link: 普通路由链接(系统不会在其生成元素之上添加路由导航高亮选择器)</p><ul><li><p>作用: 创建一个普通的路由链接</p></li><li><p>用法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Link</span> to=<span class="string">&quot;&quot;</span>&gt;链接地址&lt;/<span class="title class_">Link</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="404路由"><a href="#404路由" class="headerlink" title="404路由"></a>404路由</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/* 404路由规则 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;*&quot;</span> component=&#123;<span class="title class_">NotFound</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><ul><li><p>定义动态路由规则</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/goods/:id&quot;</span> component=&#123;<span class="title class_">Goods</span>&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>获取动态路由参数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span>.<span class="property">id</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="路由传参-1"><a href="#路由传参-1" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="查询字符串传参"><a href="#查询字符串传参" class="headerlink" title="查询字符串传参"></a>查询字符串传参</h4><ol><li><p>传递参数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">NavLink</span> to=&#123;<span class="string">&#x27;/news?id=1&amp;title=财经新闻&#x27;</span>&#125;&gt;新闻详情&lt;/<span class="title class_">NavLink</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#123;</span> &#123;<span class="attr">pathname:</span>&#x27;/<span class="attr">news</span>&#x27;,<span class="attr">search:</span>&#x27;<span class="attr">id</span>=<span class="string">1&amp;title</span>=<span class="string">财经新闻</span>&#x27;&#125; &#125;&gt;</span>新闻详情<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>目标组件中接收查询字符串参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">search</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>qs查询字符串处理工具</p><ul><li><p>下载</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i qs</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>;</span><br><span class="line"><span class="comment">// 将查询字符串转换成对象</span></span><br><span class="line"><span class="keyword">var</span> obj = qs.<span class="title function_">parse</span>(<span class="string">&#x27;a=c&#x27;</span>);</span><br><span class="line"><span class="comment">// 将对象转换成查询字符串</span></span><br><span class="line"><span class="keyword">var</span> str = qs.<span class="title function_">stringify</span>(obj);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><ol><li><p>在父级路由组件中配置嵌套路由规则</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &#123;<span class="comment">/* 配置二级路由规则 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/ucenter/order&quot;</span> component=&#123;<span class="title class_">Order</span>&#125;/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/ucenter/address&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Address&#125;/</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="withRouter高阶组件"><a href="#withRouter高阶组件" class="headerlink" title="withRouter高阶组件"></a>withRouter高阶组件</h3><ul><li><p>作用: 在非路由组件中自动注入路由对象</p></li><li><p>使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入HOC高阶组件withRouter</span></span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Banner</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&#x27;#<span class="attr">eee</span>&#x27;,<span class="attr">padding:10</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>轮播图组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(<span class="title class_">Banner</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><ol><li><p>需要使用<code>React.lazy()</code>的系统方法实现路由组件的异步导入</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span>=<span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./pages/Home&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span>=<span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="keyword">return</span> <span class="title function_">import</span>(<span class="string">&#x27;./pages/Home&#x27;</span>) &#125;);</span><br></pre></td></tr></table></figure></li><li><p>需要使用系统内置的组件<code>React.Suspense</code>将路由规则组件包裹, 并且使用<code>fallback</code>属性指定加载中视图</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">React</span>.<span class="property">Suspense</span> fallback=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125;&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">component</span>=<span class="string">&#123;&#125;/</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">React</span>.<span class="property">Suspense</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><ul><li><p>通过js的方式实现页面跳转</p></li><li><p>this.props.history</p><ul><li><p>push()</p><ul><li><p>作用: 实现页面跳转</p></li><li><p>参数: 页面地址</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(<span class="string">&#x27;/home&#x27;</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(&#123;<span class="attr">pathname</span>:<span class="string">&#x27;/home&#x27;</span>&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>replace()</p><ul><li><p>作用: 实现页面跳转( 会覆盖上一次的访问历史记录 )</p></li><li><p>参数: 页面地址</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/home&#x27;</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">replace</span>(&#123;<span class="attr">pathname</span>:<span class="string">&#x27;/home&#x27;</span>&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>go()</p><ul><li><p>作用: 实现页面前进或者后退</p></li><li><p>参数: 数值, 正数表示前进, 负数表示后退</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">go</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>goBack()</p><ul><li><p>作用: 返回上一页</p></li><li><p>参数: 无</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goBack</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>goForward()</p><ul><li><p>作用: 前进到下一页</p></li><li><p>参数: 无</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goForward</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h2><h3 id="搭建数据接口服务器"><a href="#搭建数据接口服务器" class="headerlink" title="搭建数据接口服务器"></a>搭建数据接口服务器</h3><ul><li>数据接口服务器基于nodejs+mysql数据库</li><li>该数据接口支持跨域请求</li></ul><ol><li><p>下载orange-api-server.zip</p></li><li><p>解压</p></li><li><p>安装项目依赖</p><blockquote><p>在项目根目录下运行如下命令</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>导入数据库备份文件</p></li><li><p>修改项目配置(修改数据库配置参数)</p><blockquote><p>config&#x2F;global.js</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据库连接参数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">dbConfig</span> = &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>, <span class="comment">//数据库地址</span></span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,<span class="comment">//数据库用户名</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,<span class="comment">//数据库用户密码</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;orange_db&#x27;</span> <span class="comment">// 数据库名字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动数据接口服务器</p><blockquote><p>在项目根目录下运行启动命令</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>数据接口服务器监听的是3001端口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3001</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h3><h4 id="配置跨域代理"><a href="#配置跨域代理" class="headerlink" title="配置跨域代理"></a>配置跨域代理</h4><ol><li><p>安装跨域代理中间件<code>http-proxy-middleware</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i http-proxy-middleware -D</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在项目根目录<code>src</code>文件夹下创建<code>setupProxy.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入http-proxy-middleware</span></span><br><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class="line"><span class="comment">// app: 是系统自动注入的应用对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="keyword">function</span>(<span class="params">app</span>)&#123;</span><br><span class="line">    <span class="comment">// 注册跨域请求中间件</span></span><br><span class="line">    app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>,<span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">        <span class="comment">// 指定真实数据接口服务器地址</span></span><br><span class="line">        <span class="attr">target</span>:<span class="string">&#x27;http://localhost:3001&#x27;</span></span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重启开发服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="axios发送数据请求"><a href="#axios发送数据请求" class="headerlink" title="axios发送数据请求"></a>axios发送数据请求</h3><h4 id="下载安装axios"><a href="#下载安装axios" class="headerlink" title="下载安装axios"></a>下载安装axios</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i axios</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="axios简单封装"><a href="#axios简单封装" class="headerlink" title="axios简单封装"></a>axios简单封装</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="comment">// 配置baseURL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span>=<span class="string">&#x27;/api&#x27;</span>;</span><br><span class="line"><span class="comment">// 注册请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">request</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> request;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 在react组件中可以通过this.$axios调用axios</span></span><br><span class="line"><span class="title class_">React</span>.<span class="property">Component</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span>=axios;</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="fetch发送数据请求"><a href="#fetch发送数据请求" class="headerlink" title="fetch发送数据请求"></a>fetch发送数据请求</h3><ul><li>fetch是高级浏览器内置的一个数据请求的api</li><li>fetch底层是基于ES6中Promise进行封装</li><li>fetch底层不是基于XMLHttpRequest异步对象</li><li>fetch也会受到浏览器同源策略的限制</li></ul><h4 id="fetch发送get请求"><a href="#fetch发送get请求" class="headerlink" title="fetch发送get请求"></a>fetch发送get请求</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;数据接口地址&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span><span class="comment">// 请求方式, 默认为GET</span></span><br><span class="line">    <span class="attr">headers</span>:&#123;&#125;<span class="comment">//  请求头</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">resposne</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 将response对象转换成js对象</span></span><br><span class="line">    <span class="keyword">return</span> reponse.<span class="title function_">json</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="fetch发送post请求"><a href="#fetch发送post请求" class="headerlink" title="fetch发送post请求"></a>fetch发送post请求</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;数据接口地址&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,<span class="comment">// 请求方式</span></span><br><span class="line">    <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;&#125;),<span class="comment">// 请求体, 不能传递js对象,需要将js对象转换成字符串格式 </span></span><br><span class="line">    <span class="attr">headers</span>:&#123;&#125;<span class="comment">// 请求头</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>response.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="fetch的简单封装"><a href="#fetch的简单封装" class="headerlink" title="fetch的简单封装"></a>fetch的简单封装</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url: 数据接口地址</span></span><br><span class="line"><span class="comment">// method: 请求方式</span></span><br><span class="line"><span class="comment">// body: 请求体</span></span><br><span class="line"><span class="comment">// headers: 请求头</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request</span>=(<span class="params">url,method=<span class="string">&#x27;GET&#x27;</span>,body=&#123;&#125;,headers=&#123;&#125;</span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 数据接口服务器的基础域名</span></span><br><span class="line">    <span class="keyword">const</span> baseURL=<span class="string">&#x27;http://localhost:3001/api&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> options=&#123;</span><br><span class="line">        method,</span><br><span class="line">        <span class="attr">headers</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">            ...headers</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(method===<span class="string">&#x27;POST&#x27;</span>)&#123;</span><br><span class="line">        options.<span class="property">body</span>=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(body);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(baseURL+url,options).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>response.<span class="title function_">json</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  request;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><ul><li>redux是一个状态管理工具</li><li>redux不仅可以和react框架结合起来使用, 也可以和其他的主流框架结合使用</li></ul><h3 id="下载安装-3"><a href="#下载安装-3" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i redux</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h3><ul><li>store: 数据存储对象</li><li>Reducer: 函数, 专门负责操作store数据存储对象中的数据</li><li>action: 是一个数据操作对象, action&#x3D;{type:’操作类型’,data:’ 额外参数’}</li><li>action Creators: 是一类创建action数据操作对象的方法</li></ul><h3 id="store数据存储对象核心方法"><a href="#store数据存储对象核心方法" class="headerlink" title="store数据存储对象核心方法"></a>store数据存储对象核心方法</h3><ul><li><p>getState()</p><ul><li><p>类型: 方法</p></li><li><p>作用: 获取数据存储对象的数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">getState</span>();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>dispatch():</p><ul><li><p>类型: 方法</p></li><li><p>作用: 可以发送一个数据操作对象action给reducer函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;操作类型&#x27;</span>,<span class="attr">data</span>:<span class="string">&#x27;额外参数&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>subscribe()</p><ul><li><p>类型: 方法</p></li><li><p>作用: 可以监听store数据存储对象中数据的改变</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">subscribe</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 通知视图更新</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="创建数据存储对象"><a href="#创建数据存储对象" class="headerlink" title="创建数据存储对象"></a>创建数据存储对象</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入actionTypes</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">GOODSDEL</span>,<span class="variable constant_">GOODSADD</span>,<span class="variable constant_">GOODSEDIT</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入createStore数据存储对象创建方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="comment">// 状态数据初始值</span></span><br><span class="line"><span class="keyword">const</span> initData=&#123;</span><br><span class="line">    <span class="comment">// 商品列表</span></span><br><span class="line">    <span class="attr">goodsList</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">goodsname</span>:<span class="string">&#x27;苹果手机&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>:<span class="number">12999</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">id</span>:<span class="number">2</span>,</span><br><span class="line">            <span class="attr">goodsname</span>:<span class="string">&#x27;华为手机&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>:<span class="number">8999</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义reducer函数: 负责对数进行增删改查操作</span></span><br><span class="line"><span class="comment">// state: 状态数据, 必须有一个初始化值</span></span><br><span class="line"><span class="comment">// action=&#123;type:&#x27;操作类型&#x27;,data:&#x27;额外参数&#x27;&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state=initData,action</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">GOODSADD</span>:</span><br><span class="line">            <span class="comment">// 新增商品</span></span><br><span class="line">            <span class="comment">// 手动计算商品id</span></span><br><span class="line">            <span class="keyword">const</span> id=state.<span class="property">goodsList</span>.<span class="property">length</span>&gt;<span class="number">0</span>?state.<span class="property">goodsList</span>[state.<span class="property">goodsList</span>.<span class="property">length</span>-<span class="number">1</span>].<span class="property">id</span>+<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 手动构造商品对象</span></span><br><span class="line">            <span class="keyword">const</span> goods=&#123;</span><br><span class="line">                id,</span><br><span class="line">                ...action.<span class="property">data</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将商品对象追加到商品数组中</span></span><br><span class="line">            state.<span class="property">goodsList</span>.<span class="title function_">push</span>(goods);</span><br><span class="line">            <span class="keyword">return</span> &#123;...state&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">GOODSEDIT</span>:</span><br><span class="line">            <span class="comment">// 编辑商品</span></span><br><span class="line">            <span class="comment">// 根据id查找索引</span></span><br><span class="line">            <span class="keyword">const</span> i=state.<span class="property">goodsList</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">id</span>===action.<span class="property">data</span>.<span class="property">id</span>);</span><br><span class="line">            state.<span class="property">goodsList</span>[i].<span class="property">goodsname</span>=action.<span class="property">data</span>.<span class="property">goodsname</span>;</span><br><span class="line">            state.<span class="property">goodsList</span>[i].<span class="property">price</span>=action.<span class="property">data</span>.<span class="property">price</span>;</span><br><span class="line">            <span class="keyword">return</span> &#123;...state&#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">GOODSDEL</span>:</span><br><span class="line">            <span class="comment">// 删除商品</span></span><br><span class="line">            <span class="comment">// 根据商品id查找商品索引</span></span><br><span class="line">            <span class="keyword">const</span> index= state.<span class="property">goodsList</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">id</span>===action.<span class="property">data</span>);</span><br><span class="line">            <span class="comment">// 根据索引删除数组元素</span></span><br><span class="line">            state.<span class="property">goodsList</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">            <span class="comment">// 必须返回一个全新的对象, 根据老的state数据对象生成一个全新的数据对象</span></span><br><span class="line">            <span class="keyword">return</span> &#123;...state&#125;;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建数据存储对象</span></span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">createStore</span>(reducer);</span><br><span class="line"><span class="comment">// 导出数据存储对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="actionCreators"><a href="#actionCreators" class="headerlink" title="actionCreators"></a>actionCreators</h3><ul><li>创建action数据对象的方法</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入actionTyeps</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">GOODSEDIT</span>,<span class="variable constant_">GOODSADD</span>,<span class="variable constant_">GOODSDEL</span>  &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">goodsAdd</span>=(<span class="params">data</span>)=&gt;(&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="variable constant_">GOODSADD</span>,</span><br><span class="line">    data</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">goodsEdit</span>=(<span class="params">data</span>)=&gt;(&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="variable constant_">GOODSEDIT</span>,</span><br><span class="line">    data</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">goodsDel</span>=(<span class="params">data</span>)=&gt;(&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="variable constant_">GOODSDEL</span>,</span><br><span class="line">    data</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="actionTypes"><a href="#actionTypes" class="headerlink" title="actionTypes"></a>actionTypes</h3><ul><li><p>数据操作对象action中的type属性</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">GOODSDEL</span>=<span class="string">&#x27;goods/del&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">GOODSADD</span>=<span class="string">&#x27;goods/add&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">GOODSEDIT</span>=<span class="string">&#x27;goods/edit&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="redux状态管理工具"><a href="#redux状态管理工具" class="headerlink" title="redux状态管理工具"></a>redux状态管理工具</h2><h3 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h3><p>1. </p><ul><li><p>作用: 合并<code>reducer</code>函数, 将合并之后的结果交给<code>createStore</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入combineReducers</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore,combineReducers&#125; <span class="keyword">from</span>  <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="comment">// 商品模块reducer函数: 负责商品模块数据的增删改查</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">goodsReducer</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 购物车模块reducer函数: 负责购物车模块数据的增删改查</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cartReducer</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合并reducer函数</span></span><br><span class="line"><span class="keyword">const</span> reducers=<span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">    <span class="attr">goods</span>:goodsReducer,</span><br><span class="line">    <span class="attr">cart</span>:cartReducer</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建数据存储对象</span></span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">createStore</span>(reducers);</span><br></pre></td></tr></table></figure></li></ul><h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><ul><li>react的一个插件, 作用是帮助开发者在react组件中更方便的去使用redux</li></ul><h4 id="下载安装-4"><a href="#下载安装-4" class="headerlink" title="下载安装"></a>下载安装</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-redux </span><br></pre></td></tr></table></figure><h4 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h4><ul><li><p>Provider: 容器组件</p><ul><li><p>用法: 将react组件包裹起来</p></li><li><p>属性</p><ul><li>store: 可以通过该属性将redux中的数据存储对象注入到react组件中</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需导入Provider组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Provider</span> store=&#123;store&#125;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="title class_">Provider</span>&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>connect: 返回值为高阶组件的一个函数</p><ul><li><p>作用: 在react组件中获取redux中的数据存储对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> extens <span class="title class_">Component</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// state: 系统自动注入的数据存储对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">  <span class="comment">// 必须在此处返回一个数据对象, 该数据对象中的属性会自动挂载到组件的this.props系统属性上</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">goodsList</span>: [...state.<span class="property">goods</span>.<span class="property">goodsList</span>],</span><br><span class="line">    <span class="attr">cartList</span>: [...state.<span class="property">cart</span>.<span class="property">cartList</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dispatch: 是系统自动注入, 专门负责发送数据操作对象action给reducer函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapDispatchToProps</span>(<span class="params">dispatch</span>)&#123;</span><br><span class="line">  <span class="comment">// 此处必须返回一个对象, 对象中的方法会自动挂载到组件的this.props系统属性上</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">goodsAdd</span>:<span class="function">(<span class="params">data</span>)=&gt;</span><span class="title function_">dispatch</span>(<span class="title function_">goodsAdd</span>(data)),</span><br><span class="line">    <span class="attr">goodsDel</span>:<span class="function">(<span class="params">id</span>)=&gt;</span><span class="title function_">dispatch</span>(<span class="title function_">goodsDel</span>(id)),</span><br><span class="line">    <span class="attr">goodsEdit</span>:<span class="function">(<span class="params">data</span>)=&gt;</span><span class="title function_">dispatch</span>(<span class="title function_">goodsEdit</span>(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="title class_">Home</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h3><ul><li><p>bindActionCreators是由redux提供的</p></li><li><p>作用: 可以自动使用dispatch对所有的actionCreator进行包装</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需导入</span></span><br><span class="line"><span class="keyword">import</span> &#123;bindActionCreators&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dispatch: 是系统自动注入, 专门负责发送数据操作对象action给reducer函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapDispatchToProps</span>(<span class="params">dispatch</span>)&#123;</span><br><span class="line">  <span class="comment">// 此处必须返回一个对象, 对象中的方法会自动挂载到组件的this.props系统属性上</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">bindActionCreators</span>(actionCreators,dispatch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h3><ul><li><p>是一个类自定义方法</p></li><li><p>作用: 根据状态数据, 计算出来一些额外的数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算购物车中的商品总数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">cartGoodsNum</span>(<span class="params">cartList</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line">    cartList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        count+=item.<span class="property">num</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算购物车商品总价</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">cartPrice</span>(<span class="params">cartList</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> price=<span class="number">0</span>;</span><br><span class="line">    cartList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        price+=item.<span class="property">price</span>*item.<span class="property">num</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state: 系统自动注入的数据存储对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>)&#123;</span><br><span class="line">  <span class="comment">// 必须在此处返回一个数据对象, 该数据对象中的属性会自动挂载到组件的this.props系统属性上</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">goodsList</span>: [...state.<span class="property">goods</span>.<span class="property">goodsList</span>],</span><br><span class="line">    <span class="attr">cartList</span>: [...state.<span class="property">cart</span>.<span class="property">cartList</span>],</span><br><span class="line">    <span class="attr">cartGoodsNum</span>: <span class="title function_">cartGoodsNum</span>(state.<span class="property">cart</span>.<span class="property">cartList</span>),</span><br><span class="line">    <span class="attr">cartPrice</span>: <span class="title function_">cartPrice</span>(state.<span class="property">cart</span>.<span class="property">cartList</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="reselect"><a href="#reselect" class="headerlink" title="reselect"></a>reselect</h3><h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i reselect</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h4><ul><li><p>createSelector</p><ul><li><p>参数</p><ul><li>参数1: <ul><li>类型: 函数</li><li>作用: 接收调用者传递的实参, 返回值会自动注入到第二个参数中</li><li>注意: 必须有返回值</li></ul></li><li>参数2: <ul><li>类型: 函数</li><li>作用: 负责最终的数据处理</li><li>注意: 必须有返回值</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;reselect&#x27;</span>;</span><br><span class="line"><span class="comment">// 第一个参数负责接收调用者传递的数据, 第一个函数的返回值会自动注入到第二个函数中</span></span><br><span class="line"><span class="comment">// 第二个参数负责最终的数据处理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> cartGoodsNum=<span class="title function_">createSelector</span>(</span><br><span class="line">    <span class="function"><span class="params">cartList</span>=&gt;</span>cartList,</span><br><span class="line">    <span class="function"><span class="params">cartList</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cartGoodsNum&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line">        cartList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            count+=item.<span class="property">num</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="redux调试工具"><a href="#redux调试工具" class="headerlink" title="redux调试工具"></a>redux调试工具</h3><ol><li><p>需要安装redux-devtools工具包( 谷歌插件 )</p></li><li><p>安装redux-devtools的扩展工具包<code>redux-devtools-extension</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i redux-devtools-extension -D</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入redux-devtools扩展工具</span></span><br><span class="line"><span class="keyword">import</span> &#123; composeWithDevTools &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span>;</span><br><span class="line"><span class="comment">// 创建数据存储对象</span></span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">createStore</span>(reducers,<span class="title function_">composeWithDevTools</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h3><ul><li><p>redux的一个插件</p></li><li><p>作用: 可以让开发者在actionCreator中发送异步数据请求</p></li><li><p>安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i redux-thunk</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; applyMiddleware,createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="comment">// 注册异步中间件</span></span><br><span class="line"><span class="keyword">const</span> store=<span class="title function_">createStore</span>(reducers,<span class="title function_">applyMiddleware</span>(thunk));</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写异步actionCreator</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步actionCreator</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">goodsInit</span>=(<span class="params">data</span>)=&gt;(&#123;<span class="attr">type</span>:<span class="variable constant_">GOODSINIT</span>,data&#125;);</span><br><span class="line"><span class="comment">// 异步actionCreator</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">goodsInitAction</span>= (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">// dispatch: 系统自动注入的参数, 负责发送数据操作对象action给reducer函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">request</span>(<span class="string">&#x27;/getnew&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="property">code</span>===<span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">// 通过dispatch发送数据操作对象action给reducer函数</span></span><br><span class="line">                <span class="title function_">dispatch</span>(<span class="title function_">goodsInit</span>(res.<span class="property">list</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h2><ul><li>react中为了让函数组件可以拥有类组件的一些特性, 而提供的一类特殊的方法</li></ul><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><ul><li><p>作用: 可以让函数组件拥有自己的状态数据</p></li><li><p>注意: 必须在函数组件内部使用</p></li><li><p>返回值: 数组</p><ul><li>数组的第一个元素是状态数据</li><li>数组的第二个元素是更新状态数据的方法</li></ul></li><li><p>使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// count: 状态数据</span></span><br><span class="line">  <span class="comment">// setCount: 更新状态数据的方法</span></span><br><span class="line">  <span class="comment">// 0: 状态数的初始值</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><ul><li><p>作用: 让我们在函数组件中可以使用ref操作组件对象或元素对象</p></li><li><p>注意: 必须在函数组件内部使用</p></li><li><p>用法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRef&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建ref对象  </span></span><br><span class="line">  <span class="keyword">const</span> ref=<span class="title function_">useRef</span>();  </span><br><span class="line">  <span class="comment">// 按钮点击事件处理函数  </span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handle</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">      <span class="comment">// 在逻辑层通过ref获取元素对象</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(ref.<span class="property">current</span>)</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 引用ref对象 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handle&#125;</span>&gt;</span>通过ref属性操作元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hooks-1"><a href="#hooks-1" class="headerlink" title="hooks"></a>hooks</h2><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><ul><li><p>作用: 可以让函数组件拥有自己的生命周期</p></li><li><p>useEffect相当于类组件中componentWillMount, componentDidUpdate, componentWillUnmount这个三个函数的集合, 组件第一次挂载, 组件完成状态数据更新, 以及组件即将卸载的时候, 自动执行</p></li><li><p>参数</p><ul><li>参数1: 回调函数</li><li>参数2: 可选参数, 数组类型, 可以通过数组元素指定依赖数据, 只有当依赖数据发生改变的时候, 才会触发回调函数的执行; 如果不希望任何状态数据的更新触发回调函数的执行, 可以传递一个空数组作为第二个可选参数</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;useEffect&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件即将销毁&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[]);</span><br></pre></td></tr></table></figure></li></ul><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><ul><li><p>作用: 可以让开发者在函数组件中使用状态数据</p></li><li><p>参数: </p><ul><li>参数1: reducer函数</li><li>参数2: 状态数据初始值</li></ul></li><li><p>返回值: 数组</p><ul><li>元素1: 状态数据</li><li>元素2:  dispatch, 专门负责发送数据操作action给reducer函数</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useReducer&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// state: 更新之前的状态数据, 由系统自动注入</span></span><br><span class="line">    <span class="comment">// action: 数据操作对象,&#123;type:&#x27;操作类型&#x27;, data:&#x27;额外参数&#x27;&#125;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reducer</span>=(<span class="params">state=<span class="number">1</span>,action</span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">            <span class="comment">// 增加计数器</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;increase&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> state+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 减少计数器</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;decrease&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> state-<span class="number">1</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">return</span> state;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// useReducer返回值</span></span><br><span class="line">    <span class="comment">// state:状态数据; dispatch专门发送数据操作action给reducer函数的方法</span></span><br><span class="line">    <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 增加按钮点击事件处理函数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increase</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">const</span> action=&#123;<span class="attr">type</span>:<span class="string">&#x27;increase&#x27;</span>&#125;</span><br><span class="line">        <span class="comment">// 通过dispatch发送数据请求action给reducer函数</span></span><br><span class="line">        <span class="title function_">dispatch</span>(action);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 减少按钮点击事件处理函数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">decrease</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">const</span> action=&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;decrease&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过dispatch发送数据请求action给reducer函数</span></span><br><span class="line">        <span class="title function_">dispatch</span>(action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;state&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increase&#125;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrease&#125;</span>&gt;</span>减少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="context对象"><a href="#context对象" class="headerlink" title="context对象"></a>context对象</h2><ul><li>作用: 在react组件树中实现快速传递数据(  无需逐层传递 )</li></ul><h3 id="创建context对象"><a href="#创建context对象" class="headerlink" title="创建context对象"></a>创建context对象</h3>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 创建context对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span>=<span class="title function_">createContext</span>(<span class="string">&#x27;初始数据&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="在数据消费组件中获取context中的数据"><a href="#在数据消费组件中获取context中的数据" class="headerlink" title="在数据消费组件中获取context中的数据"></a>在数据消费组件中获取context中的数据</h3><ol><li><p>通过数据消费组件<code>MyContext.Consumer</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">MyContext</span>.<span class="property">Consumer</span>&gt;</span><br><span class="line">    &#123;<span class="comment">/* context: 是系统自动注入的参数, 表示context对象中存储的数据 */</span>&#125;</span><br><span class="line">    &#123;<span class="function"><span class="params">context</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(context);</span><br><span class="line">    &#125;&#125;</span><br><span class="line">&lt;/<span class="title class_">MyContext</span>.<span class="property">Consumer</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>手动将context上下文对象赋值给类组件的静态属性<code>contextType</code>, 接下来就可以在类组件中直接通过<code>this.context</code>获取context对象中的数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入context对象</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyContext</span> <span class="keyword">from</span> <span class="string">&#x27;../utils/context&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">GrandChild</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">// static contextType=MyContext;</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&#x27;<span class="attr">lightyellow</span>&#x27;,<span class="attr">padding:10</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>GrandChild组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;</span></span><br><span class="line"><span class="language-xml">                        this.context.map((item,index)=&gt;(</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        ))</span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>   </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加静态属性</span></span><br><span class="line"><span class="title class_">GrandChild</span>.<span class="property">contextType</span>=<span class="title class_">MyContext</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-memo"><a href="#3-memo" class="headerlink" title="3-memo"></a>3-memo</h2><ul><li><p>memo是react系统内置的高阶组件</p></li><li><p>作用: 可以避免函数组件的无效更新</p></li><li><p>用法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;memo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FuncComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;FuncComponent&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span>&#x27;#<span class="attr">EEE</span>&#x27;,<span class="attr">padding:10</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;props.msg&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">FuncComponent</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/09/27/JavaScript/"/>
      <url>/2022/09/27/JavaScript/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍?"></a>JavaScript介绍?</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git版本管理</title>
      <link href="/2022/09/27/useGit/"/>
      <url>/2022/09/27/useGit/</url>
      
        <content type="html"><![CDATA[<h2 id="git介绍"><a href="#git介绍" class="headerlink" title="git介绍"></a>git介绍</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</span><br><span class="line"></span><br><span class="line">1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。</span><br><span class="line"></span><br><span class="line">2、在自己的机器上根据不同的开发目的，创建分支，修改代码。</span><br><span class="line"></span><br><span class="line">3、在单机上自己创建的分支上提交代码。</span><br><span class="line"></span><br><span class="line">4、在单机上合并分支。</span><br><span class="line"></span><br><span class="line">5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。</span><br><span class="line"></span><br><span class="line">6、生成补丁（patch），把补丁发送给主开发者。</span><br><span class="line"></span><br><span class="line">7、看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。</span><br><span class="line"></span><br><span class="line">8、一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。</span><br></pre></td></tr></table></figure><h2 id="git软件安装地址"><a href="#git软件安装地址" class="headerlink" title="git软件安装地址"></a>git软件安装地址</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://git-scm.com/downloads</span><br></pre></td></tr></table></figure><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无脑安装</span><br></pre></td></tr></table></figure><h2 id="配置-git-的config"><a href="#配置-git-的config" class="headerlink" title="配置 git 的config"></a>配置 git 的config</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span>  </span><br><span class="line"></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span> </span><br><span class="line"></span><br><span class="line">eamil &amp;&amp;  name  是gitee及github 自己绑定的邮箱及用户名称</span><br><span class="line"></span><br><span class="line">git config --list   进行配置查看</span><br></pre></td></tr></table></figure><h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a>开始工作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.在本地建立一个文件夹,在创建的文件下,右键选择 Git Bash Here</span><br><span class="line">2.进去之后执行 git init </span><br><span class="line">3.做为本地代码仓库，让该文件夹成为受 git管理的仓库目录</span><br><span class="line">4.在创建的目录下创建一个文件  测试提交下是否成功</span><br><span class="line">5.提交暂存区: git add .</span><br><span class="line">6.git commit -m <span class="string">&quot;备注信息&quot;</span>  提交到仓库</span><br><span class="line">7.git push   推送到远程</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">实际开发中的三部曲</span><br><span class="line"></span><br><span class="line">    `git  add  .   提交更改文件到暂存区  <span class="string">&quot;.&quot;</span> 可以替换为指定文件</span><br><span class="line"></span><br><span class="line">    `git commit -m  <span class="string">&quot;本次更改的注释&quot;</span></span><br><span class="line"></span><br><span class="line">    `git push  推送到远程仓库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span>  仓库地址</span><br><span class="line"></span><br><span class="line">git checkout 分支名</span><br><span class="line"></span><br><span class="line">git pull  拉取线上最新代码</span><br><span class="line"></span><br><span class="line">git pull origin master  拉取msater最新分支</span><br><span class="line"></span><br><span class="line">git status   查看当前文件更改状态</span><br></pre></td></tr></table></figure><h2 id="push代码后-回退-到之前的版本"><a href="#push代码后-回退-到之前的版本" class="headerlink" title="push代码后 回退 到之前的版本"></a>push代码后 回退 到之前的版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 强制到目标版本</span><br><span class="line"></span><br><span class="line">git reset --hard 回退到的版本号</span><br><span class="line"></span><br><span class="line">2. 把当前的<span class="built_in">head</span>指针指向，强制提交推送到远程，实现回退版本</span><br><span class="line"></span><br><span class="line">git push -f origin 分支名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于 TypeScript</title>
      <link href="/2022/09/24/TypeScript/"/>
      <url>/2022/09/24/TypeScript/</url>
      
        <content type="html"><![CDATA[<h3 id="TypeScript介绍"><a href="#TypeScript介绍" class="headerlink" title="TypeScript介绍"></a>TypeScript介绍</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">TypeScript</span>: 静态类型检查器</span><br><span class="line"><span class="title class_">TypeScript</span>为<span class="variable constant_">JS</span>的超集   为强类型    <span class="title class_">JavaScript</span>为弱类型</span><br><span class="line"><span class="title class_">Ts</span> === <span class="title class_">Js</span> +  类型      js有的ts都有</span><br><span class="line"><span class="variable constant_">TS</span> 规范了 js类型声明 使它更严谨</span><br></pre></td></tr></table></figure><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p>依赖安装</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  i -g  typescript</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc  ts文件            每次都需要执行</span><br><span class="line">tsc  ts文件  --watch   保存就会运行</span><br></pre></td></tr></table></figure><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><h4 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">age</span>:<span class="built_in">number</span> = <span class="number">18</span>     <span class="comment">//:number   表示类型注解</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>:<span class="built_in">string</span> = <span class="string">&quot;雷雷&quot;</span>  </span><br><span class="line"><span class="comment">// ---类型注解约束了只能给该变量赋值该类型的值</span></span><br></pre></td></tr></table></figure><h4 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始类型 1.JavaScript 已有类型</span></span><br><span class="line"><span class="comment">// 原始类型： number/string/boolean/null/undefined/symbol</span></span><br><span class="line"><span class="comment">// 对象类型：object(数组、对象、函数等)</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">username</span>:<span class="built_in">string</span> = <span class="string">&quot;雷雷&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>:<span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sex</span>:<span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">job</span>:<span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">salary</span>:<span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  2.TypeScript 新增类型</span></span><br><span class="line"><span class="comment">// 联合类型、自定义类型（类型别名）、接口、元祖、字面量类型、枚举、void、any 等</span></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;   <span class="comment">// 不加为全局模块   加了就是局部模块</span></span><br></pre></td></tr></table></figure><h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名数组</span></span><br><span class="line"><span class="comment">// 1,类型[]  写法  </span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">userList</span>:<span class="built_in">string</span>[] = [<span class="string">&quot;一号&quot;</span>,<span class="string">&quot;二号&quot;</span>]</span><br><span class="line">userList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">numList</span>:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">436</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">numList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2,Array&lt;类型&gt;  泛型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">userList1</span>:<span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; =  [<span class="string">&quot;一号&quot;</span>,<span class="string">&quot;二号&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">numList1</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">436</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><h3 id="新增类型"><a href="#新增类型" class="headerlink" title="新增类型"></a>新增类型</h3><h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当有多个类型的时候  可以用  |(竖线)   分割多个类型 </span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">salary</span>: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="literal">null</span> | <span class="literal">undefined</span> | <span class="built_in">boolean</span> = <span class="string">&quot;25k&quot;</span></span><br><span class="line">salary = <span class="number">100</span></span><br><span class="line">salary = <span class="literal">null</span></span><br><span class="line">salary = <span class="literal">undefined</span></span><br><span class="line">salary = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果数组中存在多个 字符串或者是数组</span></span><br><span class="line"><span class="comment">// 1,</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>:<span class="built_in">string</span>[] | <span class="built_in">number</span>[] = [<span class="number">3</span>, <span class="number">213</span>, <span class="number">221</span>, <span class="number">44</span>, <span class="number">21</span>]</span><br><span class="line">arr1 = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2,</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>:<span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; = [<span class="string">&quot;1&quot;</span>, <span class="number">2</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3,</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>:(<span class="built_in">string</span> | <span class="built_in">number</span>)[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;2&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个类型被频繁使用</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>:(<span class="built_in">string</span> | <span class="built_in">number</span>)[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>:(<span class="built_in">string</span> | <span class="built_in">number</span>)[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>:(<span class="built_in">string</span> | <span class="built_in">number</span>)[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// type  自定义类型 = 具体类型  可以使用自定义类型代指  具体类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomArr</span> = <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;   <span class="comment">//声明一个自定义类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr4</span>: <span class="title class_">CustomArr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line"><span class="comment">// type  自定义类型 = 具体类型 </span></span><br></pre></td></tr></table></figure><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须要指定函数得参数类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add1</span>(<span class="params">num1:<span class="built_in">number</span>, num2:<span class="built_in">number</span></span>):<span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2    <span class="comment">// 必须返回number类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add1</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sum</span>:<span class="built_in">number</span> = <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum, <span class="string">&#x27;----&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数声明类型</span></span><br><span class="line"><span class="keyword">const</span> add2 = (<span class="attr">num1</span>:<span class="built_in">number</span>, <span class="attr">num2</span>:<span class="built_in">number</span>):<span class="function"><span class="params">number</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sum1</span>:<span class="built_in">number</span> = <span class="title function_">add2</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum1, <span class="string">&#x27;----&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时指定参数和返回值</span></span><br><span class="line"><span class="comment">// 自定义类型的函数用的返回值 指定 不再是:   而是箭头函数 =&gt;     </span></span><br><span class="line"><span class="comment">// 自定义了一个函数类型 指定了函数类型的参数  返回值</span></span><br><span class="line"><span class="comment">// 一旦用上了type关键字  此时我们代码处于类型上下文  ===  遵循ts语法规范及运行守则</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomFunc</span> = <span class="function">(<span class="params">num1:<span class="built_in">number</span>, num2:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型兼容性(暂且放下)</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">add3</span>: <span class="title class_">CustomFunc</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sum2</span>:<span class="built_in">number</span> = <span class="title function_">add3</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum2, <span class="string">&#x27;----&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假如函数没有返回值  可以使用void关键字来指定</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomFunc2</span> = <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="comment">// 表示函数没有返回值</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">add4</span>: <span class="title class_">CustomFunc2</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 类型的兼容性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1213</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不写表示add5返回 void类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add5</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义void类型的函数  add5 === add6</span></span><br><span class="line"><span class="keyword">const</span> add6 = ():<span class="function"><span class="params">void</span> =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果返回类型为undefined  则必须去返回一个undefined</span></span><br><span class="line"><span class="keyword">const</span> add7 = ():<span class="function"><span class="params">undefined</span> =&gt;</span> <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ?  表示参数可传不传</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomFunc</span> = <span class="function">(<span class="params">start?:<span class="built_in">number</span>, end?:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="comment">// 可选参数的位置必须处于必选参数的后面</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">slice</span>: <span class="title class_">CustomFunc</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">slice</span>()</span><br><span class="line"><span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 对象类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>:&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span>,  <span class="comment">// 用户名为string类型</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,  </span><br><span class="line">    <span class="attr">run</span>: <span class="title class_">Function</span>    <span class="comment">// 属性名:Function</span></span><br><span class="line">&#125; = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;雷雷&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">run</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;雷雷加油&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">person.<span class="title function_">run</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象中属性为函数时 ts的写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person2</span>: &#123;</span><br><span class="line">    <span class="title function_">run</span>():<span class="built_in">string</span>  <span class="comment">// 方法():返回值</span></span><br><span class="line">&#125; = &#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;雷雷&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法名: Function  方法名(): string</span></span><br><span class="line"><span class="comment">// 方法名: () =&gt; string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person3</span>: &#123;</span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> <span class="built_in">string</span>  <span class="comment">// 方法():返回值</span></span><br><span class="line">&#125; = &#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;雷雷&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义类型来定义对象类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomObj</span> = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> <span class="built_in">string</span>   <span class="comment">// 可以指定返回值</span></span><br><span class="line">    <span class="comment">// run():string     // 也可以</span></span><br><span class="line">    <span class="comment">// run: Function        // 无法指定     </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用定义好的CustomObj类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person4</span>: <span class="title class_">CustomObj</span> = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ll&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象的可选属性"><a href="#对象的可选属性" class="headerlink" title="对象的可选属性"></a>对象的可选属性</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用自定义类型来定义对象类型</span></span><br><span class="line"><span class="comment">//  ? 表示可选属性  可选可不选</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomObj</span> = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="built_in">string</span></span><br><span class="line">    age?: <span class="built_in">number</span>   <span class="comment">// ? 将属性变为可选属性</span></span><br><span class="line">    run?: <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用定义好的CustomObj类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person4</span>: <span class="title class_">CustomObj</span> = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="interface类型"><a href="#interface类型" class="headerlink" title="interface类型"></a>interface类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口类型 interface 来声明接口 </span></span><br><span class="line"><span class="comment"> * 声明之后  直接使用接口称作为变量的类型</span></span><br><span class="line"><span class="comment"> * */</span> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPeolple</span> &#123;</span><br><span class="line">    <span class="attr">useranme</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num1</span>: <span class="title class_">IPeolple</span> = &#123;</span><br><span class="line">    <span class="attr">useranme</span>: <span class="string">&#x27;132&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// void  允许为空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口 与  自定义类型的区别</span></span><br><span class="line"><span class="comment"> * 相同: 都可以给对象指定类型 </span></span><br><span class="line"><span class="comment"> * 不同: 接口只能为对象指定类型  类型别名可以为任意类型指定别名</span></span><br><span class="line"><span class="comment"> * 推荐  type</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口继承</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> test1 &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface test2 &#123;</span></span><br><span class="line"><span class="comment">//     x: number</span></span><br><span class="line"><span class="comment">//     y: number</span></span><br><span class="line"><span class="comment">//     z: number</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">interface</span> test2 <span class="keyword">extends</span> test1 &#123;</span><br><span class="line">    <span class="attr">z</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: test2 = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">z</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="元祖类型"><a href="#元祖类型" class="headerlink" title="元祖类型"></a>元祖类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元祖类型</span></span><br><span class="line"><span class="comment"> * 定义一个数组中具体索引位置的类型时  可以使用元祖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示范</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">position</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">1</span>, <span class="number">3</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误示范   //第二个必须为number类型</span></span><br><span class="line"><span class="comment">// let position1: [string, number] = [&#x27;string&#x27;, &quot;1132&quot;]  </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类型推断</span></span><br><span class="line"><span class="comment"> * ts帮助我们自动推导出类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出现场景</span></span><br><span class="line"><span class="comment"> * 1, 声明变量初始化时候</span></span><br><span class="line"><span class="comment"> * 2,决定函数返回值时候</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> useranme = <span class="string">&#x27;雷雷&#x27;</span></span><br><span class="line"><span class="comment">// useranme = 214  //  会报错</span></span><br><span class="line">useranme = <span class="string">&#x27;214&#x27;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动推导出返回值为number类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add1</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add1</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 推荐能够省略类型注解的地方就省略  充分利用ts提升开发效率</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字面量类型</span></span><br><span class="line"><span class="comment"> * 字面量其实就是一个固定得值  可以跟联合类型搭配使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推论出类型为string</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">&#x27;ll&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推论出类型为124</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原因:  因为str是常量  不能变换  只能是124</span></span><br><span class="line"><span class="comment"> *  124 就是一个字面量类型  即特殊的字符也可以作为ts中的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;124&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用场景:</span></span><br><span class="line"><span class="comment"> * 1,字面量与联合类型一起使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dess = <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> (<span class="attr">qwe</span>:dess) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;down&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>:<span class="number">1</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 枚举会有一个自增的值从0开始  </span></span><br><span class="line"><span class="comment">// 需要指定  可以修改第一个值开始递增</span></span><br><span class="line"><span class="comment">// left=0  right=1 up=2 down=3  依次递增</span></span><br><span class="line"><span class="keyword">enum</span> lis &#123;</span><br><span class="line">    left = <span class="number">1</span>,</span><br><span class="line">    right,</span><br><span class="line">    up,</span><br><span class="line">    down,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> (<span class="attr">l</span>:lis) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// ===</span></span><br><span class="line"><span class="title function_">test</span>(lis.<span class="property">left</span>)</span><br><span class="line"><span class="title function_">test</span>(lis.<span class="property">right</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> lis1 &#123;</span><br><span class="line">    left = <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">    right = <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">    up = <span class="string">&#x27;up&#x27;</span>,</span><br><span class="line">    down = <span class="string">&#x27;down&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span> (<span class="attr">wq</span>:lis1) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test1</span>(lis1.<span class="property">down</span>)</span><br><span class="line"><span class="title function_">test1</span>(lis1.<span class="property">left</span>)</span><br></pre></td></tr></table></figure><h4 id="any类型"><a href="#any类型" class="headerlink" title="any类型"></a>any类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * any类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>:<span class="built_in">any</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">str = <span class="number">1</span></span><br><span class="line">str = <span class="literal">true</span></span><br><span class="line">str = <span class="title class_">Object</span></span><br><span class="line">str = <span class="literal">null</span></span><br><span class="line">str = <span class="literal">undefined</span></span><br><span class="line">str = []</span><br><span class="line">str = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当ts有问题时候  可以作为一个临时的解决方案</span></span><br><span class="line"><span class="comment"> * 可以解决任意问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐  尽量少用any类型</span></span><br></pre></td></tr></table></figure><h3 id="TS类型-兼容性及常用类型"><a href="#TS类型-兼容性及常用类型" class="headerlink" title="TS类型,兼容性及常用类型"></a>TS类型,兼容性及常用类型</h3><h4 id="ts类型断言"><a href="#ts类型断言" class="headerlink" title="ts类型断言"></a>ts类型断言</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类型断言</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// TS只能知道给你的类型是HTMLElement </span></span><br><span class="line"><span class="comment">// HTMLAnchorElement  为  HTMLElement 的子类型</span></span><br><span class="line"><span class="comment">// 使用  as  实现类型断言   强制转换为我们想要的类型</span></span><br><span class="line"><span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLAnchorElement</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型断言其实就是强制转换</span></span><br><span class="line">link.<span class="property">href</span> = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> test1 = &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> test2 = &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">res1</span>: test1 = &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res1 = &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;man&#x27;</span></span><br><span class="line">&#125; <span class="keyword">as</span> test2    <span class="comment">//  类型断言可以转换类型   但是不能改变初始对象</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 场景 :</span></span><br><span class="line"><span class="comment"> * 当我们的类型断言只能 推导出一个宽泛类型的时候  可以用类型断言直接推导</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="ts中的typeof"><a href="#ts中的typeof" class="headerlink" title="ts中的typeof"></a>ts中的typeof</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * typeof</span></span><br><span class="line"><span class="comment"> * JS:  获取数据的类型   typeof &quot;雷雷&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// JS</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;雷雷&quot;</span>)   <span class="comment">//返回雷雷的类型 为string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TS</span></span><br><span class="line"><span class="keyword">let</span> test = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> res = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (<span class="attr">avg</span>:res) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(test)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这时候 typeof 的上下文处于ts环境上下文</span></span><br><span class="line"><span class="comment">// 处于冒号后面的 处于ts环境上下文</span></span><br><span class="line"><span class="keyword">type</span> testCum =  <span class="keyword">typeof</span> test</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum1</span> (<span class="attr">p</span>: testCum) &#123;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">sum1</span>(test)</span><br></pre></td></tr></table></figure><h4 id="对象类型的兼容性"><a href="#对象类型的兼容性" class="headerlink" title="对象类型的兼容性"></a>对象类型的兼容性</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象类型的兼容性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> test1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">salary</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> test2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">res1</span>:test1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;雷雷&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;nan&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;西安&#x27;</span>,</span><br><span class="line">    <span class="attr">salary</span>: <span class="number">12</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">res2</span>: test2 = res1</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ts是结构化的类型系统</span></span><br><span class="line"><span class="comment"> * 只有结构相同的类型 才能相互赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象兼容性</span></span><br><span class="line"><span class="comment"> * 对象的多的属性可以赋值给对象少的属性 </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="函数类型的兼容性"><a href="#函数类型的兼容性" class="headerlink" title="函数类型的兼容性"></a>函数类型的兼容性</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数类型的兼容性</span></span><br><span class="line"><span class="comment"> * 需要考虑:</span></span><br><span class="line"><span class="comment"> *   参数的个数   </span></span><br><span class="line"><span class="comment"> *   返回值类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>)=&gt;</span>&#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, arr</span>)=&gt;</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// void 表示没有返回值</span></span><br><span class="line"><span class="keyword">type</span> test1 = <span class="function">(<span class="params">x: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> test2 = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数类型的兼容性</span></span><br><span class="line"><span class="comment"> *      参数类型少的  可以  赋值给参数多的</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> *      void  可以返回其他值</span></span><br><span class="line"><span class="comment"> *      要求其他值?  必须返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun1</span>: test1 = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a   <span class="comment">// 即使返回也不会造成影响</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun2</span>: test2 = fun1</span><br></pre></td></tr></table></figure><h4 id="泛型及用法"><a href="#泛型及用法" class="headerlink" title="泛型及用法"></a>泛型及用法</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 什么是泛型? </span></span><br><span class="line"><span class="comment"> *      让函数等 与  多种类型一起工作  实现复用</span></span><br><span class="line"><span class="comment"> *      常用于 函数  接口  class中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span> (<span class="attr">value</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span> (<span class="attr">value</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test3</span> (<span class="attr">value</span>: <span class="built_in">boolean</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的 T  就是泛型的变量  T 可以是任意类型 number  / &#123; &#125; /</span></span><br><span class="line"><span class="comment">// 保证类型的安全 不丢失类型信息的同时 函数可以和多种不同的类型一起工作 灵活使用</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> T </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span>   T他=它处理的是类型而不是值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 能够捕获用户提供的类型  具体的类型有用户调用该函数时&lt;T&gt;指定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> com&lt;T&gt;(<span class="attr">value</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line">com&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;1&#x27;</span>)   <span class="comment">//类型推论</span></span><br><span class="line"><span class="title function_">com</span>(<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型函数语法  保证类型安全  不是any</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> test = &lt;T&gt;<span class="function">(<span class="params">value1: T, value2: T, value3: T</span>) =&gt;</span> T</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun</span>: test = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let str:string = fun&lt;number&gt;(1,3,3) </span></span><br><span class="line">fun&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型约束</span></span><br><span class="line"><span class="comment"> * 默认情况下 Type可以代表任意类型  导致无法访问任何属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1,指定更加具体的类型  给T添加[]</span></span><br><span class="line"><span class="keyword">type</span> test = &lt;T&gt;<span class="function">(<span class="params">value: T[]</span>) =&gt;</span> T[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun</span>: test = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里T泛型无法找到属性</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="property">length</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义类型;</span></span><br><span class="line"><span class="comment"> * 接口中必须有 length</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILength</span> &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">x1</span>:<span class="title class_">ILength</span> = <span class="string">&quot;雷雷&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x2</span>:<span class="title class_">ILength</span> = [<span class="number">1</span>,<span class="number">31</span>,<span class="number">313</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型约束传入的类型  必须有length属性</span></span><br><span class="line"><span class="keyword">type</span> cus= &lt;T <span class="keyword">extends</span> <span class="title class_">ILength</span>&gt; <span class="function">(<span class="params">value: T</span>) =&gt;</span> T</span><br><span class="line"><span class="comment">// T extends ILength 约束了 传入的泛型必须拥有length属性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun1</span>: cus = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun1</span>(<span class="string">&quot;321321&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="多个类型变量之间的约束"><a href="#多个类型变量之间的约束" class="headerlink" title="多个类型变量之间的约束"></a>多个类型变量之间的约束</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多个类型变量之间的约束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 定义一个方法 获取对象中属性的值</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;雷雷&quot;</span>, <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">height</span>: <span class="string">&#x27;180cm&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getKey</span> (<span class="attr">obj</span>: &#123;&#125;, <span class="attr">key</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getKey</span>(obj, <span class="string">&quot;wqe&quot;</span>)  <span class="comment">//有错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义泛型的语法 </span></span><br><span class="line"><span class="comment"> * extends  继承</span></span><br><span class="line"><span class="comment"> * keyof    表示继承对象中键中的一个值 ===  键值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 传入泛型之后 要约束第二个参数 必须为T参数的key的值</span></span><br><span class="line"><span class="comment">// Key extends keyof T (Key是自定义变量名的类型名称)</span></span><br><span class="line"><span class="keyword">function</span> getKey1&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, <span class="title class_">Key</span> <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>:T, <span class="attr">key</span>: <span class="title class_">Key</span> | <span class="string">&quot;&quot;</span>)&#123;   </span><br><span class="line">    <span class="comment">// 这时候第二个参数 受第一个参数的约束 必须是第一个参数中 key中的一个值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getKey1</span>(obj, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="comment">// getKey1&lt;&gt;()</span></span><br></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fun1</span> &#123;</span><br><span class="line">    <span class="attr">fun</span>: <span class="function">(<span class="params">val: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">    <span class="attr">fun1</span>: <span class="function">() =&gt;</span> <span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fun2</span> &#123;</span><br><span class="line">    <span class="attr">fun</span>: <span class="function">(<span class="params">val: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line">    <span class="attr">fun1</span>: <span class="function">() =&gt;</span> <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fun3</span> &#123;</span><br><span class="line">    <span class="attr">fun</span>: <span class="function">(<span class="params">val: <span class="built_in">object</span></span>) =&gt;</span> <span class="built_in">object</span></span><br><span class="line">    <span class="attr">fun1</span>: <span class="function">() =&gt;</span> <span class="built_in">object</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型来解决  复用的问题  </span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Test</span> &lt;T&gt;&#123;</span><br><span class="line">    <span class="attr">fun</span>: <span class="function">(<span class="params">val: T</span>) =&gt;</span> T   <span class="comment">//  ? 表示可选</span></span><br><span class="line">    fun1?: <span class="function">() =&gt;</span> T[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj1</span>: <span class="title class_">Test</span>&lt;<span class="built_in">number</span>&gt; = &#123;<span class="title function_">fun</span>(<span class="params">num</span>)&#123;<span class="keyword">return</span> num&#125;&#125;;  obj1.<span class="title function_">fun</span>(<span class="number">111</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj2</span>: <span class="title class_">Test</span>&lt;<span class="built_in">object</span>&gt; = &#123;<span class="title function_">fun</span>(<span class="params">obj</span>)&#123;<span class="keyword">return</span> obj&#125;&#125;;  obj2.<span class="title function_">fun</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj3</span>: <span class="title class_">Test</span>&lt;<span class="built_in">string</span>&gt; = &#123;<span class="title function_">fun</span>(<span class="params">str</span>)&#123;<span class="keyword">return</span> str&#125;&#125;;  obj3.<span class="title function_">fun</span>(<span class="string">&#x27;来了&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="泛型工具-Partial"><a href="#泛型工具-Partial" class="headerlink" title="泛型工具 Partial"></a>泛型工具 Partial</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> test = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">money</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">address</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">is_marry</span>: <span class="built_in">boolean</span></span><br><span class="line">    <span class="attr">cmpany</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">wechat</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">res</span>: test = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;雷雷&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">    <span class="attr">money</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">    <span class="attr">is_marry</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">cmpany</span>: <span class="string">&quot;ll&quot;</span>,</span><br><span class="line">    <span class="attr">wechat</span>: <span class="string">&quot;hkj&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Partial 可以将传入的属性都变为可选的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> test1 = <span class="title class_">Partial</span>&lt;test&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">res1</span>:test1 = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">res1.<span class="property">cmpany</span> = <span class="string">&quot;dfasf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 源代码Partial</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// type Partial&lt;T&gt; = &#123;</span></span><br><span class="line"><span class="comment">//     [P in keyof T]?: T[P];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h4 id="ReadOnly-只读类型"><a href="#ReadOnly-只读类型" class="headerlink" title="ReadOnly 只读类型"></a>ReadOnly 只读类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> test = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">money</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReadOnly  将类型中的所有属性变为只读属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> res1 = <span class="title class_">Readonly</span>&lt;test&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">qw</span>: test = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;雷雷&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">    <span class="attr">money</span>: <span class="number">10000</span>,</span><br><span class="line">&#125;</span><br><span class="line">qw.<span class="property">money</span> =  <span class="number">3214</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">qw1</span>: res1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;雷雷&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">    <span class="attr">money</span>: <span class="number">10000</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// qw1.name = &quot;adsg&quot;   //只读  不能更改</span></span><br></pre></td></tr></table></figure><h4 id="Pick类型-构造新类型"><a href="#Pick类型-构造新类型" class="headerlink" title="Pick类型  构造新类型"></a>Pick类型  构造新类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">children</span>: <span class="built_in">number</span>[]    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pick 选择从属性中构造新类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PickProps</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Props</span>, <span class="string">&#x27;id&#x27;</span>&gt;;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>:<span class="title class_">PickProps</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// title: &#x27;214&#x27;  // 对象文字可以只指定已知属性，并且“title”不在类型“PickProps”中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记</title>
      <link href="/2022/09/21/learnNote/"/>
      <url>/2022/09/21/learnNote/</url>
      
        <content type="html"><![CDATA[<h3 id="1-快速生成100条数据-生成数组"><a href="#1-快速生成100条数据-生成数组" class="headerlink" title="1,快速生成100条数据(生成数组)"></a>1,快速生成100条数据(生成数组)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">100</span>),<span class="function">(<span class="params">item,index</span>)=&gt;</span><span class="string">`数据<span class="subst">$&#123;index+<span class="number">1</span>&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><h3 id="2-useEffect"><a href="#2-useEffect" class="headerlink" title="2,useEffect"></a>2,useEffect</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">useEffect 专业解释  副作用  提供书写副作用代码的空间</span><br><span class="line">useEffect 可以代替<span class="keyword">class</span>组件的若干个钩子函数</span><br><span class="line">useEffect 中的回调函数会在组件更新时执行</span><br><span class="line">useEffect 俩个参数  第一个 callback回调函数</span><br><span class="line">   第二个 数组 [依赖项]</span><br><span class="line"><span class="number">1</span>,  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;)  不传第二个参数且依赖项为空</span><br><span class="line">只要组件渲染更新就会执行   相当于<span class="keyword">class</span>的componentDidMount + componentDidUpdate</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>,<span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;,[])  如果是一个空数组   发送数据请求(不会频繁的更新)</span><br><span class="line">此时只会在组件第一次渲染时完成执行(更新) ==  componentDidMount</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>,<span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;,[count])  有依赖项</span><br><span class="line">    相当于componentDidMount + <span class="title class_">Vue</span>(watch)(变量发生了变化) 依赖项发生改变时就会更新</span><br><span class="line">        </span><br><span class="line"><span class="number">4</span>, <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;<span class="keyword">return</span> <span class="function">()=&gt;</span> &#123;&#125; &#125;,[])</span><br><span class="line"><span class="keyword">return</span> 返回一个回调函数   </span><br><span class="line">销毁组件 或者  完成一次更新的时候就会执行这个函数</span><br><span class="line">        </span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1111111&#x27;</span>);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口变化了&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// useEffect 可以返回内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 回调函数的意义  setTimeout</span></span><br><span class="line">      <span class="comment">// 销毁组价 或者  完成一次更新的时候就会执行这个函数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="comment">// 第二个参 数不传  就会每次函数都会执行</span></span><br><span class="line">  <span class="comment">// []  只在渲染时执行第一次</span></span><br><span class="line">  <span class="comment">// [a,]  只要变量发生了表  回调函数就会执行</span></span><br></pre></td></tr></table></figure><h3 id="3-git问题解决"><a href="#3-git问题解决" class="headerlink" title="3,git问题解决"></a>3,git问题解决</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/yunmengying/article/details/105487691    </span><br></pre></td></tr></table></figure><h3 id="4，ts的优势"><a href="#4，ts的优势" class="headerlink" title="4，ts的优势"></a>4，ts的优势</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts属于静态类型的编程语言，也就是带啊会先通过编译，然后运行，编译不通过，自然暴露了代码中的问题</span><br></pre></td></tr></table></figure><h3 id="5，解决俩个ts文件之间的变量名冲突"><a href="#5，解决俩个ts文件之间的变量名冲突" class="headerlink" title="5，解决俩个ts文件之间的变量名冲突"></a>5，解决俩个ts文件之间的变量名冲突</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-a  非模块化环境下，ts文件声明的变量会当做全局变量</span><br><span class="line"></span><br><span class="line">​ -b  加export &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="6，-类型注解"><a href="#6，-类型注解" class="headerlink" title="6， 类型注解"></a>6， 类型注解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型注解约束了只能给该变量赋值该类型的值1</span><br></pre></td></tr></table></figure><h3 id="7-useState"><a href="#7-useState" class="headerlink" title="7,useState()"></a>7,useState()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">是一个泛型函数 接收一个类型变量来指定状态的类型</span><br><span class="line"></span><br><span class="line">当遇到never类形时  表示此类型不能用   不能通过该类型来解释当下的运行环境, 必须指明类型</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    type custorm = &#123;</span><br><span class="line">    <span class="attr">id</span>: number,</span><br><span class="line">    <span class="attr">name</span>: string,</span><br><span class="line">  &#125;[]</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState&lt;number&gt;(<span class="number">0</span>);  <span class="comment">// 直接传入泛型的写法</span></span><br><span class="line">  <span class="comment">// const [count1, setCount1] = useState(0);  // 单值得情况下 可以不传 有类型推论</span></span><br><span class="line">  <span class="comment">// 当值不是单值的情况下 必须指定泛型</span></span><br><span class="line">  <span class="keyword">const</span> [channel, setChannel] = useState&lt;custorm&gt;([])   <span class="comment">// 渲染    一个频道列表</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      主页</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前数字:&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count+1)&#125;&gt;加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count-1)&#125;&gt;减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          channel.map(item =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setChannel([</span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">              id:1,</span></span><br><span class="line"><span class="language-xml">              name: &#x27;小灰灰&#x27;</span></span><br><span class="line"><span class="language-xml">            &#125;,</span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">              id:2,</span></span><br><span class="line"><span class="language-xml">              name: &#x27;小蓝蓝&#x27;</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">          ])</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &gt;设置数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-useRef"><a href="#8-useRef" class="headerlink" title="8,useRef()"></a>8,useRef()</h3><p>当使用useRef时候  必须显示指明泛型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 必须显示指明泛型</span></span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef&lt;<span class="title class_">HTMLInputElement</span>&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 获取inputDOM对象*/&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">             // 处理空值时的解决方案</span></span><br><span class="line"><span class="language-xml">             // 由于ref.current属性可能是null  可以使用可选链操作符</span></span><br><span class="line"><span class="language-xml">            console.log(inputRef.current?.value, &#x27;imnputDom&#x27;);</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &gt;获取inputDOM对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-非空断言"><a href="#9-非空断言" class="headerlink" title="9,非空断言"></a>9,非空断言</h3><p>如果我们明确的知道对象的属性在使用时一定不为空，那么可以使用 TS 中提供的：非空断言</p><p>非空断言：<code>!</code>，从可能为空的类型中，去掉 <code>null</code> 和 <code>undefined</code> 类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2022/09/21/createBlog/"/>
      <url>/2022/09/21/createBlog/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装nodejs-安装git"><a href="#1-安装nodejs-安装git" class="headerlink" title="1,安装nodejs  安装git"></a>1,安装nodejs  安装git</h3><p>1.安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  i  -g  hexo</span><br></pre></td></tr></table></figure><h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s    or     hexo serve</span><br></pre></td></tr></table></figure><h3 id="4-创建文章"><a href="#4-创建文章" class="headerlink" title="4,创建文章"></a>4,创建文章</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;博客文件名称&quot;   or     hexo n &quot;博客文件名称&quot; </span><br></pre></td></tr></table></figure><h3 id="5-安装"><a href="#5-安装" class="headerlink" title="5,安装"></a>5,安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h3 id="6-创建git仓库推送"><a href="#6-创建git仓库推送" class="headerlink" title="6,创建git仓库推送"></a>6,创建git仓库推送</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建github仓库的时候要注意  仓库名一定要记得用户名保持一致 </span><br><span class="line">如: 用户名  leilei0405  仓库名:leilei0405.github.io</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;# leilei405.github.io&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:leilei405/leilei405.github.io.git</span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:leilei405/leilei405.github.io.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h3 id="7-切换主题"><a href="#7-切换主题" class="headerlink" title="7,切换主题"></a>7,切换主题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git theme/yilia</span><br></pre></td></tr></table></figure><h3 id="8-修改-config-yml"><a href="#8-修改-config-yml" class="headerlink" title="8, 修改_config.yml"></a>8, 修改_config.yml</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly    太多可以搜索下   butterfly替换为  yilia</span><br></pre></td></tr></table></figure><h3 id="9-每次推送的一个步骤"><a href="#9-每次推送的一个步骤" class="headerlink" title="9,每次推送的一个步骤"></a>9,每次推送的一个步骤</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g  or   hexo generate</span><br><span class="line">hexo d  or   hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 初始化  常用命令</title>
      <link href="/2022/09/17/useHexo/"/>
      <url>/2022/09/17/useHexo/</url>
      
        <content type="html"><![CDATA[<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span>    // 创建新的文章 可以使用typora 与 vim界面来编写</span><br></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server  or  hexo  s    启动4000端口服务</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate    重构项目文件</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy  or  hexo d    部署到github</span><br></pre></td></tr></table></figure><h3 id="部署三部曲"><a href="#部署三部曲" class="headerlink" title="部署三部曲"></a>部署三部曲</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1,$ hexo  clean           $ hexo cl</span><br><span class="line">2,$ hexo  generate        $ hexo g</span><br><span class="line">3,$ hexo  deploy          $ hexo d</span><br><span class="line">// $ 省略</span><br></pre></td></tr></table></figure><h3 id="终端下执行"><a href="#终端下执行" class="headerlink" title="终端下执行"></a>终端下执行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g  &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
