<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端常见面试题</title>
      <link href="/2022/09/28/Interview/"/>
      <url>/2022/09/28/Interview/</url>
      
        <content type="html"><![CDATA[<h3 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h3><p>防抖:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>节流:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="执行代码-console输出的信息是"><a href="#执行代码-console输出的信息是" class="headerlink" title="执行代码,console输出的信息是?"></a>执行代码,console输出的信息是?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> a = (b=<span class="number">5</span>)</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p>结果:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b =  ?</span><br><span class="line">a =  ?</span><br></pre></td></tr></table></figure><h3 id="浏览器渲染页面做了什么"><a href="#浏览器渲染页面做了什么" class="headerlink" title="浏览器渲染页面做了什么?"></a>浏览器渲染页面做了什么?</h3><h3 id="从输入url到加载完页面发生了什么"><a href="#从输入url到加载完页面发生了什么" class="headerlink" title="从输入url到加载完页面发生了什么?"></a>从输入url到加载完页面发生了什么?</h3><h3 id="闭包是什么"><a href="#闭包是什么" class="headerlink" title="闭包是什么?"></a>闭包是什么?</h3><h3 id="原型-原型链"><a href="#原型-原型链" class="headerlink" title="原型,原型链?"></a>原型,原型链?</h3><h3 id="回流-重绘"><a href="#回流-重绘" class="headerlink" title="回流,重绘?"></a>回流,重绘?</h3><h3 id="作用域-作用域链"><a href="#作用域-作用域链" class="headerlink" title="作用域,作用域链?"></a>作用域,作用域链?</h3><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数?"></a>箭头函数?</h3><h3 id="JS判断数组的方法"><a href="#JS判断数组的方法" class="headerlink" title="JS判断数组的方法?"></a>JS判断数组的方法?</h3><h3 id="try-x2F-catch-x2F-finally"><a href="#try-x2F-catch-x2F-finally" class="headerlink" title="try&#x2F;catch&#x2F;finally?"></a>try&#x2F;catch&#x2F;finally?</h3><h3 id="async-amp-amp-await"><a href="#async-amp-amp-await" class="headerlink" title="async  &amp;&amp;  await?"></a>async  &amp;&amp;  await?</h3><h3 id="js继承的方式"><a href="#js继承的方式" class="headerlink" title="js继承的方式?"></a>js继承的方式?</h3><h3 id="typeof-null"><a href="#typeof-null" class="headerlink" title="typeof null?"></a>typeof null?</h3><h3 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题?"></a>this指向问题?</h3><h3 id="深拷贝-amp-amp-浅拷贝"><a href="#深拷贝-amp-amp-浅拷贝" class="headerlink" title="深拷贝 &amp;&amp; 浅拷贝?"></a>深拷贝 &amp;&amp; 浅拷贝?</h3><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制?"></a>垃圾回收机制?</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Angular</title>
      <link href="/2022/09/28/angular/"/>
      <url>/2022/09/28/angular/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用组件库及工具网站</title>
      <link href="/2022/09/28/oftenTool/"/>
      <url>/2022/09/28/oftenTool/</url>
      
        <content type="html"><![CDATA[<p>组件库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>动画库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>工具库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于TS创建React项目</title>
      <link href="/2022/09/28/based-ts-react/"/>
      <url>/2022/09/28/based-ts-react/</url>
      
        <content type="html"><![CDATA[<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app react-ts --template typescript</span><br><span class="line">添加 --template typescript 表示创建支持<span class="variable constant_">TS</span>的项目</span><br></pre></td></tr></table></figure><h3 id="目录变化"><a href="#目录变化" class="headerlink" title="目录变化"></a>目录变化</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>在项目根目录多了一个tsconfig.<span class="property">json</span>（<span class="variable constant_">TS</span> 的配置文件）</span><br><span class="line"><span class="number">2.</span>src目录中 原来的 .<span class="property">js</span> 变为 .<span class="property">ts</span> 或 .<span class="property">tsx</span></span><br><span class="line">   .<span class="property">ts</span>  ts文件的后缀名</span><br><span class="line">   .<span class="property">tsx</span> 是在<span class="variable constant_">TS</span>中使用<span class="title class_">React</span>组件时的后缀,只要代码中出现<span class="variable constant_">JSX</span>结构,就得使用该后缀</span><br><span class="line"><span class="number">3.</span>src目录中,多了react-app-env.<span class="property">d</span>.<span class="property">ts</span>文件</span><br><span class="line">    .<span class="property">d</span>.<span class="property">ts</span> 类型声明文件，用来指定类型</span><br><span class="line">    切记:不要动 src/react-app-env.<span class="property">d</span>.<span class="property">ts</span> 文件</span><br></pre></td></tr></table></figure><h3 id="x2F-x2F-x2F-指令"><a href="#x2F-x2F-x2F-指令" class="headerlink" title="&#x2F;&#x2F;&#x2F;指令"></a>&#x2F;&#x2F;&#x2F;指令</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TS 中的 三斜线指令，作用类似于 import 用于指定对其他类型声明文件的依赖关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处，通过 types 来声明依赖于 react-scripts 包</span></span><br><span class="line"><span class="comment">// https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html#-reference-types-</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;react-scripts&quot; /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="tsconfig-的介绍"><a href="#tsconfig-的介绍" class="headerlink" title="tsconfig 的介绍"></a>tsconfig 的介绍</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tsconfig.json 是 TS 项目的配置文件，可以用来指定如何编译 TS 代码等</span><br><span class="line">手动创建 tsconfig.json 配置文件的命令：tsc --init</span><br><span class="line">说明：所有的配置项都可以通过鼠标移入的方式，来查看配置项的解释说明</span><br><span class="line">tsconfig文档链接:https://www.typescriptlang.org/tsconfig</span><br></pre></td></tr></table></figure><h3 id="各个配置项作用"><a href="#各个配置项作用" class="headerlink" title="各个配置项作用"></a>各个配置项作用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">  <span class="comment">// 编译选项</span></span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 生成代码的语言版本：将我们写的 TS 代码编译成哪个版本的 JS 代码</span></span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="comment">// 指定要包含在编译中的 library</span></span><br><span class="line">    <span class="comment">// https://github.com/microsoft/TypeScript/blob/90e83adb44/lib/lib.dom.iterable.d.ts</span></span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;dom&quot;</span>, <span class="string">&quot;dom.iterable&quot;</span>, <span class="string">&quot;esnext&quot;</span>],</span><br><span class="line">    <span class="comment">// 允许 ts 编译器编译 js 文件</span></span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 跳过类型声明文件的类型检查</span></span><br><span class="line">    <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// es 模块 互操作，屏蔽 ESModule 和 CommonJS 之间的差异</span></span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 允许通过 import x from &#x27;y&#x27; 即使模块没有显式指定 default 导出</span></span><br><span class="line">    <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 开启严格模式</span></span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 对文件名称强制区分大小写</span></span><br><span class="line">    <span class="string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 为 switch 语句启用错误报告</span></span><br><span class="line">    <span class="string">&quot;noFallthroughCasesInSwitch&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 生成代码的模块化标准</span></span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="comment">// 模块解析（查找）策略</span></span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="comment">// 允许导入扩展名为.json的模块</span></span><br><span class="line">    <span class="string">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 是否将没有 import/export 的文件视为旧（全局而非模块化）脚本文件</span></span><br><span class="line">    <span class="string">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 编译时不生成任何JS文件（只进行类型检查）</span></span><br><span class="line">    <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 指定将 JSX 编译成什么形式</span></span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;react-jsx&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指定允许 ts 处理的目录</span></span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;src&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型声明文件介绍"><a href="#类型声明文件介绍" class="headerlink" title="类型声明文件介绍"></a>类型声明文件介绍</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在项目开发中使用第三方库时,几乎都有相应的 TS 类型</span><br><span class="line"></span><br><span class="line">类型声明文件：用来为已存在的 JS 提供类型信息</span><br><span class="line"></span><br><span class="line">TS项目中使用这些库时,就像用TS一样,都会有代码提示,类型保护等机制</span><br></pre></td></tr></table></figure><h3 id="TS-的两种文件类型"><a href="#TS-的两种文件类型" class="headerlink" title="TS 的两种文件类型"></a>TS 的两种文件类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">ts</span> 文件:</span><br><span class="line">    既包含类型信息又包含可执行代码</span><br><span class="line">    可以被编译为 .<span class="property">js</span> 文件，然后，执行代码</span><br><span class="line">    用途：编写程序代码的地方</span><br><span class="line"></span><br><span class="line">.<span class="property">d</span>.<span class="property">ts</span> 文件:</span><br><span class="line">    只包含类型信息的类型声明文件</span><br><span class="line">    不会生成 .<span class="property">js</span> 文件，仅用于提供类型信息，在.<span class="property">d</span>.<span class="property">ts</span> 文件中不允许出现可执行的代码，只用于提供类型</span><br><span class="line">    用途：为 <span class="variable constant_">JS</span> 提供类型信息</span><br><span class="line"></span><br><span class="line">总结:</span><br><span class="line">    .<span class="property">ts</span> 是 implementation（代码实现文件）</span><br><span class="line"></span><br><span class="line">    .<span class="property">d</span>.<span class="property">ts</span> 是 declaration（类型声明文件）</span><br><span class="line"></span><br><span class="line">    如果要为 <span class="variable constant_">JS</span> 提供类型信息，要使用 .<span class="property">d</span>.<span class="property">ts</span> 文件</span><br></pre></td></tr></table></figure><h3 id="类型声明文件-内置"><a href="#类型声明文件-内置" class="headerlink" title="类型声明文件-内置"></a>类型声明文件-内置</h3><p>TS为JS 运行时可用的所有标准化内置API都提供了声明文件</p><p>在使用数组时，数组所有方法都会有相应的代码提示以及类型信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strs = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="comment">// ctrl+鼠标左键点击查看</span></span><br><span class="line">strs.<span class="property">forEach</span></span><br></pre></td></tr></table></figure><h3 id="类型声明文件-第三方库"><a href="#类型声明文件-第三方库" class="headerlink" title="类型声明文件-第三方库"></a>类型声明文件-第三方库</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    目前，几乎所有常用的第三方库都有相应的类型声明文件</span><br><span class="line"></span><br><span class="line">    第三方库的类型声明文件有两种存在形式：</span><br><span class="line">    1,库自带类型声明文件 </span><br><span class="line">    2,由DefinitelyTyped提供</span><br><span class="line"></span><br><span class="line">库自带类型声明文件：比如，axios</span><br><span class="line"></span><br><span class="line">    查看 node_modules/axios 目录</span><br><span class="line">    解释：这种情况下，正常导入该库，TS 就会自动加载库自己的类型声明文件，以提供该库的类型声明</span><br><span class="line">    VSCode 中如何找到它的类型声明文件？就是在 import 导入包的时候，会读取 axios 的 package.json 中的 types 字段，来加载指定的类型声明文件</span><br><span class="line"></span><br><span class="line">由 DefinitelyTyped 提供</span><br><span class="line">    DefinitelyTyped 是一个 github 仓库，用来提供高质量 TypeScript 类型声明，DefinitelyTyped 链接</span><br><span class="line">    可以通过 npm/yarn 来下载该仓库提供的 TS 类型声明包，这些包的名称格式为：@types/*，比如，@types/react、@types/lodash 等</span><br><span class="line">    在实际项目开发时，如果你使用的第三方库没有自带的声明文件，VSCode 会给出明确的提示</span><br><span class="line">    import _ from &#x27;lodash&#x27;;</span><br><span class="line"></span><br><span class="line">    // 在 VSCode 中，鼠标移上去，查看 &#x27;lodash&#x27; 前面的提示</span><br><span class="line">    解释：当安装 @types/* 类型声明包后，TS 也会自动加载该类声明包，以提供该库的类型声明</span><br></pre></td></tr></table></figure><h3 id="类型声明文件-自定义"><a href="#类型声明文件-自定义" class="headerlink" title="类型声明文件-自定义"></a>类型声明文件-自定义</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">项目内共享类型</span><br><span class="line"></span><br><span class="line">    如果多个 .ts 文件中都用到同一个类型，此时可以创建 .d.ts 文件提供该类型，实现类型共享</span><br><span class="line"></span><br><span class="line">操作步骤:</span><br><span class="line"></span><br><span class="line">    创建 index.d.ts 类型声明文件</span><br><span class="line"></span><br><span class="line">    创建需要共享的类型，并使用 export 导出（TS 中的类型也可以使用 import/export 实现模块化功能）</span><br><span class="line"></span><br><span class="line">    在需要使用共享类型的 .ts 文件中，通过 import 导入即可（.d.ts 后缀导入时，直接省略）</span><br><span class="line"></span><br><span class="line">为已有 JS 文件提供类型声明</span><br><span class="line"></span><br><span class="line">    在将 JS 项目迁移到 TS 项目时，为了让已有的 .js 文件有类型声明</span><br><span class="line">    成为库作者，创建库给其他人使用</span><br></pre></td></tr></table></figure><h3 id="类型声明文件的使用说明"><a href="#类型声明文件的使用说明" class="headerlink" title="类型声明文件的使用说明"></a>类型声明文件的使用说明</h3><p>说明 1：TS 项目中也可以使用 .js 文件</p><p>说明 2：在导入 .js 文件时，TS 会自动加载与 .js 同名的 .d.ts 文件，以提供类型声明</p><pre><code>比如，在 导入 index.js 时，会自动加载 index.d.ts 类型声明文件</code></pre><p>declare 关键字：用于类型声明，为其他地方（比如，.js 文件）已存在的变量声明类型，而不是创建一个新的变量</p><pre><code>1.对于 type、interface 等这些明确就是 TS 类型的（只能在 TS 中使用的)，可以省略 declare 关键字2.对于 let、function 等具有双重含义（在 JS、TS 中都能用），应该使用 declare 关键字，明确指定此处用于类型声明</code></pre><h4 id="js-文件需要在-TS-代码中使用"><a href="#js-文件需要在-TS-代码中使用" class="headerlink" title=".js 文件需要在 TS 代码中使用"></a>.js 文件需要在 TS 代码中使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils.js 文件：</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> songName = <span class="string">&#x27;痴心绝对&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> position = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(direction);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fomartPoint</span> = (<span class="params">point</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前坐标：&#x27;</span>, point);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; count, songName, position, add, changeDirection, fomartPoint &#125;;</span><br></pre></td></tr></table></figure><h4 id="创建上面-js-文件的类型声明文件"><a href="#创建上面-js-文件的类型声明文件" class="headerlink" title="创建上面 .js 文件的类型声明文件"></a>创建上面 .js 文件的类型声明文件</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils.d.ts 文件：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">songName</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// position 变量</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Position</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">position</span>: <span class="title class_">Position</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add 函数</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// changeDirection 函数</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Direction</span> = <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span> | <span class="string">&#x27;top&#x27;</span> | <span class="string">&#x27;bottom&#x27;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: Direction</span>): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fomartPoint 函数</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FomartPoint</span> = <span class="function">(<span class="params">point: Position</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">fomartPoint</span>: <span class="title class_">FomartPoint</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    songName,</span><br><span class="line">    position,</span><br><span class="line">    add,</span><br><span class="line">    changeDirection,</span><br><span class="line">    <span class="title class_">FomartPoint</span>,</span><br><span class="line">    fomartPoint,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="在文件中导入上述-js-文件，查看是否有类型提示"><a href="#在文件中导入上述-js-文件，查看是否有类型提示" class="headerlink" title="在文件中导入上述 .js 文件，查看是否有类型提示"></a>在文件中导入上述 .js 文件，查看是否有类型提示</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    songName,</span><br><span class="line">    position,</span><br><span class="line">    add,</span><br><span class="line">    changeDirection,</span><br><span class="line">    <span class="title class_">FomartPoint</span>,</span><br><span class="line">    fomartPoint,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2022/09/27/React/"/>
      <url>/2022/09/27/React/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2022/09/27/Vue/"/>
      <url>/2022/09/27/Vue/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/09/27/JavaScript/"/>
      <url>/2022/09/27/JavaScript/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍?"></a>JavaScript介绍?</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git版本管理</title>
      <link href="/2022/09/27/useGit/"/>
      <url>/2022/09/27/useGit/</url>
      
        <content type="html"><![CDATA[<h2 id="git介绍"><a href="#git介绍" class="headerlink" title="git介绍"></a>git介绍</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</span><br><span class="line"></span><br><span class="line">1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。</span><br><span class="line"></span><br><span class="line">2、在自己的机器上根据不同的开发目的，创建分支，修改代码。</span><br><span class="line"></span><br><span class="line">3、在单机上自己创建的分支上提交代码。</span><br><span class="line"></span><br><span class="line">4、在单机上合并分支。</span><br><span class="line"></span><br><span class="line">5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。</span><br><span class="line"></span><br><span class="line">6、生成补丁（patch），把补丁发送给主开发者。</span><br><span class="line"></span><br><span class="line">7、看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。</span><br><span class="line"></span><br><span class="line">8、一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。</span><br></pre></td></tr></table></figure><h2 id="git软件安装地址"><a href="#git软件安装地址" class="headerlink" title="git软件安装地址"></a>git软件安装地址</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://git-scm.com/downloads</span><br></pre></td></tr></table></figure><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无脑安装</span><br></pre></td></tr></table></figure><h2 id="配置-git-的config"><a href="#配置-git-的config" class="headerlink" title="配置 git 的config"></a>配置 git 的config</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span>  </span><br><span class="line"></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span> </span><br><span class="line"></span><br><span class="line">eamil &amp;&amp;  name  是gitee及github 自己绑定的邮箱及用户名称</span><br><span class="line"></span><br><span class="line">git config --list   进行配置查看</span><br></pre></td></tr></table></figure><h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a>开始工作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.在本地建立一个文件夹,在创建的文件下,右键选择 Git Bash Here</span><br><span class="line">2.进去之后执行 git init </span><br><span class="line">3.做为本地代码仓库，让该文件夹成为受 git管理的仓库目录</span><br><span class="line">4.在创建的目录下创建一个文件  测试提交下是否成功</span><br><span class="line">5.提交暂存区: git add .</span><br><span class="line">6.git commit -m <span class="string">&quot;备注信息&quot;</span>  提交到仓库</span><br><span class="line">7.git push   推送到远程</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">实际开发中的三部曲</span><br><span class="line"></span><br><span class="line">    `git  add  .   提交更改文件到暂存区  <span class="string">&quot;.&quot;</span> 可以替换为指定文件</span><br><span class="line"></span><br><span class="line">    `git commit -m  <span class="string">&quot;本次更改的注释&quot;</span></span><br><span class="line"></span><br><span class="line">    `git push  推送到远程仓库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span>  仓库地址</span><br><span class="line"></span><br><span class="line">git checkout 分支名</span><br><span class="line"></span><br><span class="line">git pull  拉取线上最新代码</span><br><span class="line"></span><br><span class="line">git pull origin master  拉取msater最新分支</span><br><span class="line"></span><br><span class="line">git status   查看当前文件更改状态</span><br></pre></td></tr></table></figure><h2 id="push代码后-回退-到之前的版本"><a href="#push代码后-回退-到之前的版本" class="headerlink" title="push代码后 回退 到之前的版本"></a>push代码后 回退 到之前的版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 强制到目标版本</span><br><span class="line"></span><br><span class="line">git reset --hard 回退到的版本号</span><br><span class="line"></span><br><span class="line">2. 把当前的<span class="built_in">head</span>指针指向，强制提交推送到远程，实现回退版本</span><br><span class="line"></span><br><span class="line">git push -f origin 分支名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于 TypeScript</title>
      <link href="/2022/09/24/TypeScript/"/>
      <url>/2022/09/24/TypeScript/</url>
      
        <content type="html"><![CDATA[<h3 id="TypeScript介绍"><a href="#TypeScript介绍" class="headerlink" title="TypeScript介绍"></a>TypeScript介绍</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">TypeScript</span>: 静态类型检查器</span><br><span class="line"><span class="title class_">TypeScript</span>为<span class="variable constant_">JS</span>的超集   为强类型    <span class="title class_">JavaScript</span>为弱类型</span><br><span class="line"><span class="title class_">Ts</span> === <span class="title class_">Js</span> +  类型      js有的ts都有</span><br><span class="line"><span class="variable constant_">TS</span> 规范了 js类型声明 使它更严谨</span><br></pre></td></tr></table></figure><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p>依赖安装</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  i -g  typescript</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc  ts文件            每次都需要执行</span><br><span class="line">tsc  ts文件  --watch   保存就会运行</span><br></pre></td></tr></table></figure><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><h4 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">age</span>:<span class="built_in">number</span> = <span class="number">18</span>     <span class="comment">//:number   表示类型注解</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>:<span class="built_in">string</span> = <span class="string">&quot;雷雷&quot;</span>  </span><br><span class="line"><span class="comment">// ---类型注解约束了只能给该变量赋值该类型的值</span></span><br></pre></td></tr></table></figure><h4 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始类型 1.JavaScript 已有类型</span></span><br><span class="line"><span class="comment">// 原始类型： number/string/boolean/null/undefined/symbol</span></span><br><span class="line"><span class="comment">// 对象类型：object(数组、对象、函数等)</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">username</span>:<span class="built_in">string</span> = <span class="string">&quot;雷雷&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>:<span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sex</span>:<span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">job</span>:<span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">salary</span>:<span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  2.TypeScript 新增类型</span></span><br><span class="line"><span class="comment">// 联合类型、自定义类型（类型别名）、接口、元祖、字面量类型、枚举、void、any 等</span></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;   <span class="comment">// 不加为全局模块   加了就是局部模块</span></span><br></pre></td></tr></table></figure><h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名数组</span></span><br><span class="line"><span class="comment">// 1,类型[]  写法  </span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">userList</span>:<span class="built_in">string</span>[] = [<span class="string">&quot;一号&quot;</span>,<span class="string">&quot;二号&quot;</span>]</span><br><span class="line">userList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">numList</span>:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">436</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">numList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2,Array&lt;类型&gt;  泛型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">userList1</span>:<span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; =  [<span class="string">&quot;一号&quot;</span>,<span class="string">&quot;二号&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">numList1</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">436</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><h3 id="新增类型"><a href="#新增类型" class="headerlink" title="新增类型"></a>新增类型</h3><h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当有多个类型的时候  可以用  |(竖线)   分割多个类型 </span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">salary</span>: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="literal">null</span> | <span class="literal">undefined</span> | <span class="built_in">boolean</span> = <span class="string">&quot;25k&quot;</span></span><br><span class="line">salary = <span class="number">100</span></span><br><span class="line">salary = <span class="literal">null</span></span><br><span class="line">salary = <span class="literal">undefined</span></span><br><span class="line">salary = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果数组中存在多个 字符串或者是数组</span></span><br><span class="line"><span class="comment">// 1,</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>:<span class="built_in">string</span>[] | <span class="built_in">number</span>[] = [<span class="number">3</span>, <span class="number">213</span>, <span class="number">221</span>, <span class="number">44</span>, <span class="number">21</span>]</span><br><span class="line">arr1 = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2,</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>:<span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; = [<span class="string">&quot;1&quot;</span>, <span class="number">2</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3,</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>:(<span class="built_in">string</span> | <span class="built_in">number</span>)[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;2&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个类型被频繁使用</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>:(<span class="built_in">string</span> | <span class="built_in">number</span>)[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>:(<span class="built_in">string</span> | <span class="built_in">number</span>)[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>:(<span class="built_in">string</span> | <span class="built_in">number</span>)[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// type  自定义类型 = 具体类型  可以使用自定义类型代指  具体类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomArr</span> = <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;   <span class="comment">//声明一个自定义类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr4</span>: <span class="title class_">CustomArr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line"><span class="comment">// type  自定义类型 = 具体类型 </span></span><br></pre></td></tr></table></figure><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须要指定函数得参数类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add1</span>(<span class="params">num1:<span class="built_in">number</span>, num2:<span class="built_in">number</span></span>):<span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2    <span class="comment">// 必须返回number类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add1</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sum</span>:<span class="built_in">number</span> = <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum, <span class="string">&#x27;----&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数声明类型</span></span><br><span class="line"><span class="keyword">const</span> add2 = (<span class="attr">num1</span>:<span class="built_in">number</span>, <span class="attr">num2</span>:<span class="built_in">number</span>):<span class="function"><span class="params">number</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sum1</span>:<span class="built_in">number</span> = <span class="title function_">add2</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum1, <span class="string">&#x27;----&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时指定参数和返回值</span></span><br><span class="line"><span class="comment">// 自定义类型的函数用的返回值 指定 不再是:   而是箭头函数 =&gt;     </span></span><br><span class="line"><span class="comment">// 自定义了一个函数类型 指定了函数类型的参数  返回值</span></span><br><span class="line"><span class="comment">// 一旦用上了type关键字  此时我们代码处于类型上下文  ===  遵循ts语法规范及运行守则</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomFunc</span> = <span class="function">(<span class="params">num1:<span class="built_in">number</span>, num2:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型兼容性(暂且放下)</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">add3</span>: <span class="title class_">CustomFunc</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sum2</span>:<span class="built_in">number</span> = <span class="title function_">add3</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum2, <span class="string">&#x27;----&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假如函数没有返回值  可以使用void关键字来指定</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomFunc2</span> = <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="comment">// 表示函数没有返回值</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">add4</span>: <span class="title class_">CustomFunc2</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 类型的兼容性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1213</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不写表示add5返回 void类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add5</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义void类型的函数  add5 === add6</span></span><br><span class="line"><span class="keyword">const</span> add6 = ():<span class="function"><span class="params">void</span> =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果返回类型为undefined  则必须去返回一个undefined</span></span><br><span class="line"><span class="keyword">const</span> add7 = ():<span class="function"><span class="params">undefined</span> =&gt;</span> <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ?  表示参数可传不传</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomFunc</span> = <span class="function">(<span class="params">start?:<span class="built_in">number</span>, end?:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="comment">// 可选参数的位置必须处于必选参数的后面</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">slice</span>: <span class="title class_">CustomFunc</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">slice</span>()</span><br><span class="line"><span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 对象类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>:&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span>,  <span class="comment">// 用户名为string类型</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,  </span><br><span class="line">    <span class="attr">run</span>: <span class="title class_">Function</span>    <span class="comment">// 属性名:Function</span></span><br><span class="line">&#125; = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;雷雷&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">run</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;雷雷加油&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">person.<span class="title function_">run</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象中属性为函数时 ts的写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person2</span>: &#123;</span><br><span class="line">    <span class="title function_">run</span>():<span class="built_in">string</span>  <span class="comment">// 方法():返回值</span></span><br><span class="line">&#125; = &#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;雷雷&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法名: Function  方法名(): string</span></span><br><span class="line"><span class="comment">// 方法名: () =&gt; string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person3</span>: &#123;</span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> <span class="built_in">string</span>  <span class="comment">// 方法():返回值</span></span><br><span class="line">&#125; = &#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;雷雷&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义类型来定义对象类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomObj</span> = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> <span class="built_in">string</span>   <span class="comment">// 可以指定返回值</span></span><br><span class="line">    <span class="comment">// run():string     // 也可以</span></span><br><span class="line">    <span class="comment">// run: Function        // 无法指定     </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用定义好的CustomObj类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person4</span>: <span class="title class_">CustomObj</span> = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ll&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象的可选属性"><a href="#对象的可选属性" class="headerlink" title="对象的可选属性"></a>对象的可选属性</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用自定义类型来定义对象类型</span></span><br><span class="line"><span class="comment">//  ? 表示可选属性  可选可不选</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CustomObj</span> = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="built_in">string</span></span><br><span class="line">    age?: <span class="built_in">number</span>   <span class="comment">// ? 将属性变为可选属性</span></span><br><span class="line">    run?: <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用定义好的CustomObj类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person4</span>: <span class="title class_">CustomObj</span> = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="interface类型"><a href="#interface类型" class="headerlink" title="interface类型"></a>interface类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口类型 interface 来声明接口 </span></span><br><span class="line"><span class="comment"> * 声明之后  直接使用接口称作为变量的类型</span></span><br><span class="line"><span class="comment"> * */</span> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPeolple</span> &#123;</span><br><span class="line">    <span class="attr">useranme</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num1</span>: <span class="title class_">IPeolple</span> = &#123;</span><br><span class="line">    <span class="attr">useranme</span>: <span class="string">&#x27;132&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// void  允许为空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口 与  自定义类型的区别</span></span><br><span class="line"><span class="comment"> * 相同: 都可以给对象指定类型 </span></span><br><span class="line"><span class="comment"> * 不同: 接口只能为对象指定类型  类型别名可以为任意类型指定别名</span></span><br><span class="line"><span class="comment"> * 推荐  type</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口继承</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> test1 &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface test2 &#123;</span></span><br><span class="line"><span class="comment">//     x: number</span></span><br><span class="line"><span class="comment">//     y: number</span></span><br><span class="line"><span class="comment">//     z: number</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">interface</span> test2 <span class="keyword">extends</span> test1 &#123;</span><br><span class="line">    <span class="attr">z</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: test2 = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">z</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="元祖类型"><a href="#元祖类型" class="headerlink" title="元祖类型"></a>元祖类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元祖类型</span></span><br><span class="line"><span class="comment"> * 定义一个数组中具体索引位置的类型时  可以使用元祖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示范</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">position</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">1</span>, <span class="number">3</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误示范   //第二个必须为number类型</span></span><br><span class="line"><span class="comment">// let position1: [string, number] = [&#x27;string&#x27;, &quot;1132&quot;]  </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类型推断</span></span><br><span class="line"><span class="comment"> * ts帮助我们自动推导出类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出现场景</span></span><br><span class="line"><span class="comment"> * 1, 声明变量初始化时候</span></span><br><span class="line"><span class="comment"> * 2,决定函数返回值时候</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> useranme = <span class="string">&#x27;雷雷&#x27;</span></span><br><span class="line"><span class="comment">// useranme = 214  //  会报错</span></span><br><span class="line">useranme = <span class="string">&#x27;214&#x27;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动推导出返回值为number类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add1</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add1</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 推荐能够省略类型注解的地方就省略  充分利用ts提升开发效率</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字面量类型</span></span><br><span class="line"><span class="comment"> * 字面量其实就是一个固定得值  可以跟联合类型搭配使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推论出类型为string</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">&#x27;ll&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推论出类型为124</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原因:  因为str是常量  不能变换  只能是124</span></span><br><span class="line"><span class="comment"> *  124 就是一个字面量类型  即特殊的字符也可以作为ts中的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;124&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用场景:</span></span><br><span class="line"><span class="comment"> * 1,字面量与联合类型一起使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dess = <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> (<span class="attr">qwe</span>:dess) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;down&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>:<span class="number">1</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 枚举会有一个自增的值从0开始  </span></span><br><span class="line"><span class="comment">// 需要指定  可以修改第一个值开始递增</span></span><br><span class="line"><span class="comment">// left=0  right=1 up=2 down=3  依次递增</span></span><br><span class="line"><span class="keyword">enum</span> lis &#123;</span><br><span class="line">    left = <span class="number">1</span>,</span><br><span class="line">    right,</span><br><span class="line">    up,</span><br><span class="line">    down,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> (<span class="attr">l</span>:lis) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// ===</span></span><br><span class="line"><span class="title function_">test</span>(lis.<span class="property">left</span>)</span><br><span class="line"><span class="title function_">test</span>(lis.<span class="property">right</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> lis1 &#123;</span><br><span class="line">    left = <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">    right = <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">    up = <span class="string">&#x27;up&#x27;</span>,</span><br><span class="line">    down = <span class="string">&#x27;down&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span> (<span class="attr">wq</span>:lis1) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test1</span>(lis1.<span class="property">down</span>)</span><br><span class="line"><span class="title function_">test1</span>(lis1.<span class="property">left</span>)</span><br></pre></td></tr></table></figure><h4 id="any类型"><a href="#any类型" class="headerlink" title="any类型"></a>any类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * any类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>:<span class="built_in">any</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">str = <span class="number">1</span></span><br><span class="line">str = <span class="literal">true</span></span><br><span class="line">str = <span class="title class_">Object</span></span><br><span class="line">str = <span class="literal">null</span></span><br><span class="line">str = <span class="literal">undefined</span></span><br><span class="line">str = []</span><br><span class="line">str = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当ts有问题时候  可以作为一个临时的解决方案</span></span><br><span class="line"><span class="comment"> * 可以解决任意问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐  尽量少用any类型</span></span><br></pre></td></tr></table></figure><h3 id="TS类型-兼容性及常用类型"><a href="#TS类型-兼容性及常用类型" class="headerlink" title="TS类型,兼容性及常用类型"></a>TS类型,兼容性及常用类型</h3><h4 id="ts类型断言"><a href="#ts类型断言" class="headerlink" title="ts类型断言"></a>ts类型断言</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类型断言</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// TS只能知道给你的类型是HTMLElement </span></span><br><span class="line"><span class="comment">// HTMLAnchorElement  为  HTMLElement 的子类型</span></span><br><span class="line"><span class="comment">// 使用  as  实现类型断言   强制转换为我们想要的类型</span></span><br><span class="line"><span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLAnchorElement</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型断言其实就是强制转换</span></span><br><span class="line">link.<span class="property">href</span> = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> test1 = &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> test2 = &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">res1</span>: test1 = &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res1 = &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;man&#x27;</span></span><br><span class="line">&#125; <span class="keyword">as</span> test2    <span class="comment">//  类型断言可以转换类型   但是不能改变初始对象</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 场景 :</span></span><br><span class="line"><span class="comment"> * 当我们的类型断言只能 推导出一个宽泛类型的时候  可以用类型断言直接推导</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="ts中的typeof"><a href="#ts中的typeof" class="headerlink" title="ts中的typeof"></a>ts中的typeof</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * typeof</span></span><br><span class="line"><span class="comment"> * JS:  获取数据的类型   typeof &quot;雷雷&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// JS</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;雷雷&quot;</span>)   <span class="comment">//返回雷雷的类型 为string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TS</span></span><br><span class="line"><span class="keyword">let</span> test = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> res = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (<span class="attr">avg</span>:res) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(test)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这时候 typeof 的上下文处于ts环境上下文</span></span><br><span class="line"><span class="comment">// 处于冒号后面的 处于ts环境上下文</span></span><br><span class="line"><span class="keyword">type</span> testCum =  <span class="keyword">typeof</span> test</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum1</span> (<span class="attr">p</span>: testCum) &#123;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">sum1</span>(test)</span><br></pre></td></tr></table></figure><h4 id="对象类型的兼容性"><a href="#对象类型的兼容性" class="headerlink" title="对象类型的兼容性"></a>对象类型的兼容性</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象类型的兼容性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> test1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">salary</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> test2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">res1</span>:test1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;雷雷&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;nan&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;西安&#x27;</span>,</span><br><span class="line">    <span class="attr">salary</span>: <span class="number">12</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">res2</span>: test2 = res1</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ts是结构化的类型系统</span></span><br><span class="line"><span class="comment"> * 只有结构相同的类型 才能相互赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象兼容性</span></span><br><span class="line"><span class="comment"> * 对象的多的属性可以赋值给对象少的属性 </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="函数类型的兼容性"><a href="#函数类型的兼容性" class="headerlink" title="函数类型的兼容性"></a>函数类型的兼容性</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数类型的兼容性</span></span><br><span class="line"><span class="comment"> * 需要考虑:</span></span><br><span class="line"><span class="comment"> *   参数的个数   </span></span><br><span class="line"><span class="comment"> *   返回值类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>)=&gt;</span>&#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, arr</span>)=&gt;</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// void 表示没有返回值</span></span><br><span class="line"><span class="keyword">type</span> test1 = <span class="function">(<span class="params">x: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> test2 = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数类型的兼容性</span></span><br><span class="line"><span class="comment"> *      参数类型少的  可以  赋值给参数多的</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> *      void  可以返回其他值</span></span><br><span class="line"><span class="comment"> *      要求其他值?  必须返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun1</span>: test1 = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a   <span class="comment">// 即使返回也不会造成影响</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun2</span>: test2 = fun1</span><br></pre></td></tr></table></figure><h4 id="泛型及用法"><a href="#泛型及用法" class="headerlink" title="泛型及用法"></a>泛型及用法</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 什么是泛型? </span></span><br><span class="line"><span class="comment"> *      让函数等 与  多种类型一起工作  实现复用</span></span><br><span class="line"><span class="comment"> *      常用于 函数  接口  class中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span> (<span class="attr">value</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span> (<span class="attr">value</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test3</span> (<span class="attr">value</span>: <span class="built_in">boolean</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的 T  就是泛型的变量  T 可以是任意类型 number  / &#123; &#125; /</span></span><br><span class="line"><span class="comment">// 保证类型的安全 不丢失类型信息的同时 函数可以和多种不同的类型一起工作 灵活使用</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> T </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span>   T他=它处理的是类型而不是值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 能够捕获用户提供的类型  具体的类型有用户调用该函数时&lt;T&gt;指定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> com&lt;T&gt;(<span class="attr">value</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line">com&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;1&#x27;</span>)   <span class="comment">//类型推论</span></span><br><span class="line"><span class="title function_">com</span>(<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型函数语法  保证类型安全  不是any</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> test = &lt;T&gt;<span class="function">(<span class="params">value1: T, value2: T, value3: T</span>) =&gt;</span> T</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun</span>: test = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let str:string = fun&lt;number&gt;(1,3,3) </span></span><br><span class="line">fun&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型约束</span></span><br><span class="line"><span class="comment"> * 默认情况下 Type可以代表任意类型  导致无法访问任何属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1,指定更加具体的类型  给T添加[]</span></span><br><span class="line"><span class="keyword">type</span> test = &lt;T&gt;<span class="function">(<span class="params">value: T[]</span>) =&gt;</span> T[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun</span>: test = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里T泛型无法找到属性</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="property">length</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义类型;</span></span><br><span class="line"><span class="comment"> * 接口中必须有 length</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILength</span> &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">x1</span>:<span class="title class_">ILength</span> = <span class="string">&quot;雷雷&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x2</span>:<span class="title class_">ILength</span> = [<span class="number">1</span>,<span class="number">31</span>,<span class="number">313</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型约束传入的类型  必须有length属性</span></span><br><span class="line"><span class="keyword">type</span> cus= &lt;T <span class="keyword">extends</span> <span class="title class_">ILength</span>&gt; <span class="function">(<span class="params">value: T</span>) =&gt;</span> T</span><br><span class="line"><span class="comment">// T extends ILength 约束了 传入的泛型必须拥有length属性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun1</span>: cus = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun1</span>(<span class="string">&quot;321321&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="多个类型变量之间的约束"><a href="#多个类型变量之间的约束" class="headerlink" title="多个类型变量之间的约束"></a>多个类型变量之间的约束</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多个类型变量之间的约束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 定义一个方法 获取对象中属性的值</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;雷雷&quot;</span>, <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">height</span>: <span class="string">&#x27;180cm&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getKey</span> (<span class="attr">obj</span>: &#123;&#125;, <span class="attr">key</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getKey</span>(obj, <span class="string">&quot;wqe&quot;</span>)  <span class="comment">//有错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义泛型的语法 </span></span><br><span class="line"><span class="comment"> * extends  继承</span></span><br><span class="line"><span class="comment"> * keyof    表示继承对象中键中的一个值 ===  键值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 传入泛型之后 要约束第二个参数 必须为T参数的key的值</span></span><br><span class="line"><span class="comment">// Key extends keyof T (Key是自定义变量名的类型名称)</span></span><br><span class="line"><span class="keyword">function</span> getKey1&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, <span class="title class_">Key</span> <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>:T, <span class="attr">key</span>: <span class="title class_">Key</span> | <span class="string">&quot;&quot;</span>)&#123;   </span><br><span class="line">    <span class="comment">// 这时候第二个参数 受第一个参数的约束 必须是第一个参数中 key中的一个值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getKey1</span>(obj, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="comment">// getKey1&lt;&gt;()</span></span><br></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fun1</span> &#123;</span><br><span class="line">    <span class="attr">fun</span>: <span class="function">(<span class="params">val: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">    <span class="attr">fun1</span>: <span class="function">() =&gt;</span> <span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fun2</span> &#123;</span><br><span class="line">    <span class="attr">fun</span>: <span class="function">(<span class="params">val: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line">    <span class="attr">fun1</span>: <span class="function">() =&gt;</span> <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fun3</span> &#123;</span><br><span class="line">    <span class="attr">fun</span>: <span class="function">(<span class="params">val: <span class="built_in">object</span></span>) =&gt;</span> <span class="built_in">object</span></span><br><span class="line">    <span class="attr">fun1</span>: <span class="function">() =&gt;</span> <span class="built_in">object</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型来解决  复用的问题  </span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Test</span> &lt;T&gt;&#123;</span><br><span class="line">    <span class="attr">fun</span>: <span class="function">(<span class="params">val: T</span>) =&gt;</span> T   <span class="comment">//  ? 表示可选</span></span><br><span class="line">    fun1?: <span class="function">() =&gt;</span> T[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj1</span>: <span class="title class_">Test</span>&lt;<span class="built_in">number</span>&gt; = &#123;<span class="title function_">fun</span>(<span class="params">num</span>)&#123;<span class="keyword">return</span> num&#125;&#125;;  obj1.<span class="title function_">fun</span>(<span class="number">111</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj2</span>: <span class="title class_">Test</span>&lt;<span class="built_in">object</span>&gt; = &#123;<span class="title function_">fun</span>(<span class="params">obj</span>)&#123;<span class="keyword">return</span> obj&#125;&#125;;  obj2.<span class="title function_">fun</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj3</span>: <span class="title class_">Test</span>&lt;<span class="built_in">string</span>&gt; = &#123;<span class="title function_">fun</span>(<span class="params">str</span>)&#123;<span class="keyword">return</span> str&#125;&#125;;  obj3.<span class="title function_">fun</span>(<span class="string">&#x27;来了&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="泛型工具-Partial"><a href="#泛型工具-Partial" class="headerlink" title="泛型工具 Partial"></a>泛型工具 Partial</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> test = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">money</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">address</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">is_marry</span>: <span class="built_in">boolean</span></span><br><span class="line">    <span class="attr">cmpany</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">wechat</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">res</span>: test = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;雷雷&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">    <span class="attr">money</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">    <span class="attr">is_marry</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">cmpany</span>: <span class="string">&quot;ll&quot;</span>,</span><br><span class="line">    <span class="attr">wechat</span>: <span class="string">&quot;hkj&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Partial 可以将传入的属性都变为可选的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> test1 = <span class="title class_">Partial</span>&lt;test&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">res1</span>:test1 = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">res1.<span class="property">cmpany</span> = <span class="string">&quot;dfasf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 源代码Partial</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// type Partial&lt;T&gt; = &#123;</span></span><br><span class="line"><span class="comment">//     [P in keyof T]?: T[P];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h4 id="ReadOnly-只读类型"><a href="#ReadOnly-只读类型" class="headerlink" title="ReadOnly 只读类型"></a>ReadOnly 只读类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> test = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">money</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReadOnly  将类型中的所有属性变为只读属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> res1 = <span class="title class_">Readonly</span>&lt;test&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">qw</span>: test = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;雷雷&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">    <span class="attr">money</span>: <span class="number">10000</span>,</span><br><span class="line">&#125;</span><br><span class="line">qw.<span class="property">money</span> =  <span class="number">3214</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">qw1</span>: res1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;雷雷&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">    <span class="attr">money</span>: <span class="number">10000</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// qw1.name = &quot;adsg&quot;   //只读  不能更改</span></span><br></pre></td></tr></table></figure><h4 id="Pick类型-构造新类型"><a href="#Pick类型-构造新类型" class="headerlink" title="Pick类型  构造新类型"></a>Pick类型  构造新类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">children</span>: <span class="built_in">number</span>[]    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pick 选择从属性中构造新类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PickProps</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Props</span>, <span class="string">&#x27;id&#x27;</span>&gt;;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>:<span class="title class_">PickProps</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// title: &#x27;214&#x27;  // 对象文字可以只指定已知属性，并且“title”不在类型“PickProps”中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记</title>
      <link href="/2022/09/21/learnNote/"/>
      <url>/2022/09/21/learnNote/</url>
      
        <content type="html"><![CDATA[<h3 id="1-快速生成100条数据-生成数组"><a href="#1-快速生成100条数据-生成数组" class="headerlink" title="1,快速生成100条数据(生成数组)"></a>1,快速生成100条数据(生成数组)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">100</span>),<span class="function">(<span class="params">item,index</span>)=&gt;</span><span class="string">`数据<span class="subst">$&#123;index+<span class="number">1</span>&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><h3 id="2-useEffect"><a href="#2-useEffect" class="headerlink" title="2,useEffect"></a>2,useEffect</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">useEffect 专业解释  副作用  提供书写副作用代码的空间</span><br><span class="line">useEffect 可以代替<span class="keyword">class</span>组件的若干个钩子函数</span><br><span class="line">useEffect 中的回调函数会在组件更新时执行</span><br><span class="line">useEffect 俩个参数  第一个 callback回调函数</span><br><span class="line">   第二个 数组 [依赖项]</span><br><span class="line"><span class="number">1</span>,  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;)  不传第二个参数且依赖项为空</span><br><span class="line">只要组件渲染更新就会执行   相当于<span class="keyword">class</span>的componentDidMount + componentDidUpdate</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>,<span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;,[])  如果是一个空数组   发送数据请求(不会频繁的更新)</span><br><span class="line">此时只会在组件第一次渲染时完成执行(更新) ==  componentDidMount</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>,<span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;,[count])  有依赖项</span><br><span class="line">    相当于componentDidMount + <span class="title class_">Vue</span>(watch)(变量发生了变化) 依赖项发生改变时就会更新</span><br><span class="line">        </span><br><span class="line"><span class="number">4</span>,</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-git问题解决"><a href="#3-git问题解决" class="headerlink" title="3,git问题解决"></a>3,git问题解决</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/yunmengying/article/details/105487691    </span><br></pre></td></tr></table></figure><h3 id="4，ts的优势"><a href="#4，ts的优势" class="headerlink" title="4，ts的优势"></a>4，ts的优势</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts属于静态类型的编程语言，也就是带啊会先通过编译，然后运行，编译不通过，自然暴露了代码中的问题</span><br></pre></td></tr></table></figure><h3 id="5，解决俩个ts文件之间的变量名冲突"><a href="#5，解决俩个ts文件之间的变量名冲突" class="headerlink" title="5，解决俩个ts文件之间的变量名冲突"></a>5，解决俩个ts文件之间的变量名冲突</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-a  非模块化环境下，ts文件声明的变量会当做全局变量</span><br><span class="line"></span><br><span class="line">​ -b  加export &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="6，-类型注解"><a href="#6，-类型注解" class="headerlink" title="6， 类型注解"></a>6， 类型注解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型注解约束了只能给该变量赋值该类型的值1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2022/09/21/createBlog/"/>
      <url>/2022/09/21/createBlog/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装nodejs-安装git"><a href="#1-安装nodejs-安装git" class="headerlink" title="1,安装nodejs  安装git"></a>1,安装nodejs  安装git</h3><p>1.安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  i  -g  hexo</span><br></pre></td></tr></table></figure><h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s    or     hexo serve</span><br></pre></td></tr></table></figure><h3 id="4-创建文章"><a href="#4-创建文章" class="headerlink" title="4,创建文章"></a>4,创建文章</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;博客文件名称&quot;   or     hexo n &quot;博客文件名称&quot; </span><br></pre></td></tr></table></figure><h3 id="5-安装"><a href="#5-安装" class="headerlink" title="5,安装"></a>5,安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h3 id="6-创建git仓库推送"><a href="#6-创建git仓库推送" class="headerlink" title="6,创建git仓库推送"></a>6,创建git仓库推送</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建github仓库的时候要注意  仓库名一定要记得用户名保持一致 </span><br><span class="line">如: 用户名  leilei0405  仓库名:leilei0405.github.io</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;# leilei405.github.io&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:leilei405/leilei405.github.io.git</span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:leilei405/leilei405.github.io.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h3 id="7-切换主题"><a href="#7-切换主题" class="headerlink" title="7,切换主题"></a>7,切换主题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git theme/yilia</span><br></pre></td></tr></table></figure><h3 id="8-修改-config-yml"><a href="#8-修改-config-yml" class="headerlink" title="8, 修改_config.yml"></a>8, 修改_config.yml</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly    太多可以搜索下   butterfly替换为  yilia</span><br></pre></td></tr></table></figure><h3 id="9-每次推送的一个步骤"><a href="#9-每次推送的一个步骤" class="headerlink" title="9,每次推送的一个步骤"></a>9,每次推送的一个步骤</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g  or   hexo generate</span><br><span class="line">hexo d  or   hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 初始化  常用命令</title>
      <link href="/2022/09/17/useHexo/"/>
      <url>/2022/09/17/useHexo/</url>
      
        <content type="html"><![CDATA[<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span>    // 创建新的文章 可以使用typora 与 vim界面来编写</span><br></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server  or  hexo  s    启动4000端口服务</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate    重构项目文件</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy  or  hexo d    部署到github</span><br></pre></td></tr></table></figure><h3 id="部署三部曲"><a href="#部署三部曲" class="headerlink" title="部署三部曲"></a>部署三部曲</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1,$ hexo  clean           $ hexo cl</span><br><span class="line">2,$ hexo  generate        $ hexo g</span><br><span class="line">3,$ hexo  deploy          $ hexo d</span><br><span class="line">// $ 省略</span><br></pre></td></tr></table></figure><h3 id="终端下执行"><a href="#终端下执行" class="headerlink" title="终端下执行"></a>终端下执行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g  &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
